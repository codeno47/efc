<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>
                An implementation of IDatabaseInitializer that will recreate and optionally re-seed the
                database only if the database does not exist.
                To seed the database, create a derived class and override the Seed method.
            </summary>
      <typeparam name="TContext">The type of the context.</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.CreateDatabaseIfNotExists`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>
                A that should be overridden to actually add data to the context for seeding. 
                The default implementation does nothing.
            </summary>
      <param name="context">The context to seed.</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>
                An instances of this class is obtained from an <see cref="T:System.Data.Entity.DbContext" /> object and can be used
                to manage the actual database backing a DbContext or connection.
                This includes creating, deleting, and checking for the existence of a database.
                Note that deletion and checking for existence of a database can be performed using just a
                connection (i.e. without a full context) by using the static methods of this class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>
            Checks whether or not the database is compatible with the the current Code First model.
            </summary>
      <param name="throwIfNoMetadata">
            If set to <c>true</c> then an exception will be thrown if no model metadata is found in
            the database. If set to <c>false</c> then this method will return <c>true</c> if metadata
            is not found.</param>
      <returns>
            True if the model hash in the context and the database match; false otherwise.
            </returns>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>
                Returns the connection being used by this context.  This may cause the
                connection to be created if it does not already exist.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>
                Creates a new database on the database server for the model defined in the backing context.
                Note that calling this method before the database initialization strategy has run will disable
                executing that strategy.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>
                Creates a new database on the database server for the model defined in the backing context, but only
                if a database with the same name does not already exist on the server.
            </summary>
      <returns>True if the database did not exist and was created; false otherwise.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>
                The connection factory to use when creating a <see cref="T:System.Data.Common.DbConnection" /> from just
                a database name or a connection string.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>
                Deletes the database on the database server if it exists, otherwise does nothing.
                Calling this method from outside of an initializer will mark the database as having
                not been initialized. This means that if an attempt is made to use the database again
                after it has been deleted, then any initializer set will run again and, usually, will
                try to create the database again automatically.
            </summary>
      <returns>True if the database did exist and was deleted; false otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>
                Deletes the database on the database server if it exists, otherwise does nothing.
            </summary>
      <param name="existingConnection">An existing connection to the database.</param>
      <returns>True if the database did exist and was deleted; false otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>
                Deletes the database on the database server if it exists, otherwise does nothing.
                The connection to the database is created using the given database name or connection string
                in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext" /> class.
            </summary>
      <param name="nameOrConnectionString">The database name or a connection string to the database.</param>
      <returns>True if the database did exist and was deleted; false otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Database.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Database.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Database.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>
                Executes the given DDL/DML command against the database.
            </summary>
      <param name="sql">The command string.</param>
      <param name="parameters">The parameters to apply to the command string.</param>
      <returns>The result returned by the database after executing the command.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>
                Checks whether or not the database exists on the server.
            </summary>
      <returns>True if the database exists; false otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>
                Checks whether or not the database exists on the server.
            </summary>
      <param name="existingConnection">An existing connection to the database.</param>
      <returns>True if the database exists; false otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>
                Checks whether or not the database exists on the server.
                The connection to the database is created using the given database name or connection string
                in the same way as is described in the documentation for the <see cref="T:System.Data.Entity.DbContext" /> class.
            </summary>
      <param name="nameOrConnectionString">The database name or a connection string to the database.</param>
      <returns>True if the database exists; false otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Database.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Database.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Database.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Database.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>
                Runs the the registered <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> on this context.
            
                If "force" is set to true, then the initializer is run regardless of whether or not it
                has been run before.  This can be useful if a database is deleted while an app is running
                and needs to be reinitialized.
            
                If "force" is set to false, then the initializer is only run if it has not already been
                run for this context, model, and connection in this app domain. This method is typically
                used when it is necessary to ensure that the database has been created and seeded
                before starting some operation where doing so lazily will cause issues, such as when the
                operation is part of a transaction.
            </summary>
      <param name="force">if set to <c>true</c> the initializer is run even if it has already been run.</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>
                Gets or sets the database initialization strategy.  The database initialization strategy is called when <see cref="T:System.Data.Entity.DbContext" /> instance
                is initialized from a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />.  The strategy can optionally check for database existence, create a new database, and
                seed the database with data.
                The default strategy is an instance of <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.
            </summary>
      <param name="strategy">The strategy.</param>
      <typeparam name="TContext">The type of the context.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>
                Creates a raw SQL query that will return elements of the given generic type.
                The type can be any type that has properties that match the names of the columns returned
                from the query, or can be a simple primitive type.  The type does not have to be an
                entity type. The results of this query are never tracked by the context even if the
                type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />
                method to return entities that are tracked by the context.
            </summary>
      <param name="sql">The SQL query string.</param>
      <param name="parameters">The parameters to apply to the SQL query string.</param>
      <typeparam name="TElement">The type of object returned by the query.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that will execute the query when it is enumerated.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>
                Creates a raw SQL query that will return elements of the given type.
                The type can be any type that has properties that match the names of the columns returned
                from the query, or can be a simple primitive type.  The type does not have to be an
                entity type. The results of this query are never tracked by the context even if the
                type of object returned is an entity type.  Use the <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />
                method to return entities that are tracked by the context.
            </summary>
      <param name="elementType">The type of object returned by the query.</param>
      <param name="sql">The SQL query string.</param>
      <param name="parameters">The parameters to apply to the SQL query string.</param>
      <returns>A <see cref="T:System.Collections.IEnumerable" /> object that will execute the query when it is enumerated.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Database.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Database.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>
                A DbContext instance represents a combination of the Unit Of Work and Repository patterns such that
                it can be used to query from a database and group together changes that will then be written
                back to the store as a unit.
                DbContext is conceptually similar to ObjectContext.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>
                Constructs a new context instance using conventions to create the name of the database to
                which a connection will be made.  The by-convention name is the full name (namespace + class name)
                of the derived context class.
                See the class remarks for how this is used to create a connection.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>
                Constructs a new context instance using the existing connection to connect to a database.
                The connection will not be disposed when the context is disposed.
            </summary>
      <param name="existingConnection">An existing connection to use for the new context.</param>
      <param name="contextOwnsConnection">If set to <c>true</c> the connection is disposed when
                the context is disposed, otherwise the caller must dispose the connection.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>
                Constructs a new context instance using the existing connection to connect to a database,
                and initializes it from the given model.
                The connection will not be disposed when the context is disposed.
                <param name="existingConnection">An existing connection to use for the new context.</param><param name="model">The model that will back this context.</param><param name="contextOwnsConnection">If set to <c>true</c> the connection is disposed when
                    the context is disposed, otherwise the caller must dispose the connection.</param></summary>
      <param name="existingConnection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>existingConnection</parameter>
            <parameter>M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="model">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>model</parameter>
            <parameter>M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="contextOwnsConnection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>contextOwnsConnection</parameter>
            <parameter>M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>
                Constructs a new context instance using conventions to create the name of the database to
                which a connection will be made, and initializes it from the given model.
                The by-convention name is the full name (namespace + class name) of the derived context class.
                See the class remarks for how this is used to create a connection.
            </summary>
      <param name="model">The model that will back this context.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>
                Constructs a new context instance around an existing ObjectContext.
                <param name="objectContext">An existing ObjectContext to wrap with the new context.</param><param name="dbContextOwnsObjectContext">If set to <c>true</c> the ObjectContext is disposed when
                    the DbContext is disposed, otherwise the caller must dispose the connection.</param></summary>
      <param name="objectContext">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>objectContext</parameter>
            <parameter>M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="dbContextOwnsObjectContext">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dbContextOwnsObjectContext</parameter>
            <parameter>M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>
                Constructs a new context instance using the given string as the name or connection string for the
                database to which a connection will be made.
                See the class remarks for how this is used to create a connection.
            </summary>
      <param name="nameOrConnectionString">Either the database name or a connection string.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>
                Constructs a new context instance using the given string as the name or connection string for the
                database to which a connection will be made, and initializes it from the given model.
                See the class remarks for how this is used to create a connection.
            </summary>
      <param name="nameOrConnectionString">Either the database name or a connection string.</param>
      <param name="model">The model that will back this context.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>
                Provides access to features of the context that deal with change tracking of entities.
            </summary>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>
                Provides access to configuration options for the context.
            </summary>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>
                Creates a Database instance for this context that allows for creation/deletion/existence checks
                for the underlying database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>
                Calls the protected Dispose method.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>
                Disposes the context. The underlying <see cref="T:System.Data.Objects.ObjectContext" /> is also disposed if it was created
                is by this context or ownership was passed to this context when this context was created.
                The connection to the database (<see cref="T:System.Data.Common.DbConnection" /> object) is also disposed if it was created
                is by this context or ownership was passed to this context when this context was created.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>
                Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> object for the given entity providing access to
                information about the entity and the ability to perform actions on the entity.
            </summary>
      <param name="entity">The entity.</param>
      <returns>An entry for the entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>
                Gets a <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> object for the given entity providing access to
                information about the entity and the ability to perform actions on the entity.
            </summary>
      <param name="entity">The entity.</param>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <returns>An entry for the entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbContext.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.DbContext.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbContext.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbContext.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbContext.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbContext.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbContext.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>
                Validates tracked entities and returns a Collection of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> containing validation results.
            </summary>
      <returns>
                Collection of validation results for invalid entities. The collection is never null and must not contain null 
                values or results for valid entities.
            </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>
                This method is called when the model for a derived context has been initialized, but
                before the model has been locked down and used to initialize the context.  The default
                implementation of this method does nothing, but it can be overridden in a derived class
                such that the model can be further configured before it is locked down.
            </summary>
      <param name="modelBuilder">The builder that defines the model for the context being created.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>
                Saves all changes made in this context to the underlying database.
            </summary>
      <returns>The number of objects written to the underlying database.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>
                Returns a DbSet instance for access to entities of the given type in the context,
                the ObjectStateManager, and the underlying store.
            </summary>
      <typeparam name="TEntity">The type entity for which a set should be returned.</typeparam>
      <returns>A set for the given entity type.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>
                Returns a non-generic DbSet instance for access to entities of the given type in the context,
                the ObjectStateManager, and the underlying store.
            </summary>
      <param name="entityType">The type of entity for which a set should be returned.</param>
      <returns>A set for the given entity type.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>
                Extension point allowing the user to override the default behavior of validating only
                added and modified entities.
            </summary>
      <param name="entityEntry">DbEntityEntry instance that is supposed to be validated.</param>
      <returns>true to proceed with validation. false otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbContext.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbContext.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>
                Extension point allowing the user to customize validation of an entity or filter out validation results.
                Called by <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />.
            </summary>
      <param name="entityEntry">DbEntityEntry instance to be validated.</param>
      <param name="items">User defined dictionary containing additional info for custom validation.
                It will be passed to <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />
                and will be exposed as <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />.
                This parameter is optional and can be null.</param>
      <returns>Entity validation result. Possibly null when overridden.</returns>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:System.Data.Entity.DbExtensions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
                or <see cref="T:System.Data.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
                underlying query object.  If the underlying query object does not have a AsNoTracking method,
                then calling this method will have no affect.
            </summary>
      <param name="source">The source query.</param>
      <returns>A new query with NoTracking applied, or the source query if NoTracking is not supported.</returns>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />
                or <see cref="T:System.Data.Objects.ObjectContext" />.  This method works by calling the AsNoTracking method of the
                underlying query object.  If the underlying query object does not have a AsNoTracking method,
                then calling this method will have no affect.
            </summary>
      <param name="source">The source query.</param>
      <typeparam name="T">The element type.</typeparam>
      <returns>A new query with NoTracking applied, or the source query if NoTracking is not supported.</returns>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="path">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})</parameter>
          </include>
        </markup>
      </param>
      <param name="path">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="TProperty">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TProperty</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="path">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>
                Enumerates the query such that for server queries such as those of <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Objects.ObjectSet`1" />,
                <see cref="T:System.Data.Objects.ObjectQuery`1" />, and others the results of the query will be loaded into the associated <see cref="T:System.Data.Entity.DbContext" />,
                <see cref="T:System.Data.Objects.ObjectContext" /> or other cache on the client.
                This is equivalent to calling ToList and then throwing away the list without the overhead of actually creating the list.
            </summary>
      <param name="source">The source query.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>
                Returns an <see cref="T:System.ComponentModel.BindingList`1" /> implementation that stays in sync with the given <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
            </summary>
      <param name="source">The collection that the binding list will stay in sync with.</param>
      <typeparam name="T">The element type.</typeparam>
      <returns>The binding list.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>
                DbModelBuilder is used to map CLR classes to a database schema.
                This code centric approach to building an Entity Data Model (EDM) model is known as 'Code First'.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder" /> class. 
            
                The process of discovering the initial model will use the set of conventions included 
                in the most recent version of the Entity Framework installed on your machine.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilder" /> class that will use 
                a specific set of conventions to discover the initial model.
            </summary>
      <param name="modelBuilderVersion">The version of conventions to be used.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> based on the configuration performed using this builder.
                The connection is used to determine the database provider being used as this
                affects the database layer of the generated model.
            </summary>
      <param name="providerConnection">Connection to use to determine provider information.</param>
      <returns>The model that was built.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> based on the configuration performed using this builder.
                Provider information must be specified because this affects the database layer of the generated model.
                For SqlClient the invariant name is 'System.Data.SqlClient' and the manifest token is the version year (i.e. '2005', '2008' etc.)
            </summary>
      <param name="providerInfo">The database provider that the model will be used with.</param>
      <returns>The model that was built.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>
                Registers a type as a complex type in the model and returns an object that can be used to
                configure the complex type. This method can be called multiple times for the same type to
                perform multiple lines of configuration.
            </summary>
      <typeparam name="TComplexType">The type to be registered or configured.</typeparam>
      <returns>The configuration object for the specified complex type.</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>
                Gets the <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> for this DbModelBuilder. 
                The registrar allows derived entity and complex type configurations to be registered with this builder.
            </summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>
                Provides access to the settings of this DbModelBuilder that deal with conventions.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>
                Registers an entity type as part of the model and returns an object that can be used to
                configure the entity. This method can be called multiple times for the same entity to
                perform multiple lines of configuration.
            </summary>
      <typeparam name="TEntityType">The type to be registered or configured.</typeparam>
      <returns>The configuration object for the specified entity type.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>
                Excludes a type from the model. This is used to remove types from the model that were added 
                by convention during initial model discovery.
            </summary>
      <typeparam name="T">The type to be excluded.</typeparam>
      <returns>The same DbModelBuilder instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
                Excludes a type(s) from the model. This is used to remove types from the model that were added 
                by convention during initial model discovery.
            </summary>
      <param name="types">The types to be excluded from the model.</param>
      <returns>The same DbModelBuilder instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbModelBuilder.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>
                A value from this enumeration can be provided directly to the <see cref="T:System.Data.Entity.DbModelBuilder" />
                class or can be used in the <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> applied to
                a class derived from <see cref="T:System.Data.Entity.DbContext" />. The value used defines which version of
                the DbContext and DbModelBuilder conventions should be used when building a model from
                code--also know as "Code First".
            </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>
                Indicates that the latest version of the <see cref="T:System.Data.Entity.DbModelBuilder" /> and 
                <see cref="T:System.Data.Entity.DbContext" /> conventions should be used.
            </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>
                Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder" /> and 
                <see cref="T:System.Data.Entity.DbContext" /> conventions shipped with Entity Framework 4.1
                through 4.3 should be used.
            </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>
                Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder" /> and 
                <see cref="T:System.Data.Entity.DbContext" /> conventions shipped with Entity Framework 5.0
                when targeting .NET 4 should be used.
            </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>
                Indicates that the version of the <see cref="T:System.Data.Entity.DbModelBuilder" /> and 
                <see cref="T:System.Data.Entity.DbContext" /> conventions shipped with Entity Framework 5.0
                when targeting .NET 4.5 should be used.
            </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>
                This attribute can be applied to a class derived from <see cref="T:System.Data.Entity.DbContext" /> to set which
                version of the DbContext and <see cref="T:System.Data.Entity.DbModelBuilder" /> conventions should be used when building
                a model from code--also know as "Code First". See the <see cref="T:System.Data.Entity.DbModelBuilderVersion" />
                enumeration for details about DbModelBuilder versions.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> class.
            </summary>
      <param name="version">The <see cref="T:System.Data.Entity.DbModelBuilder" /> conventions version to use.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>
                Gets the <see cref="T:System.Data.Entity.DbModelBuilder" /> conventions version.
            </summary>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>
                A non-generic version of <see cref="T:System.Data.Entity.DbSet`1" /> which can be used when the type of entity
                is not known at build time.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
      <param name="entity">The entity to add.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>
                Attaches the given entity to the context underlying the set.  That is, the entity is placed
                into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
      <param name="entity">The entity to attach.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.DbSet`1" /> object.
            </summary>
      <typeparam name="TEntity">The type of entity for which the set was created.</typeparam>
      <returns>The generic set object.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>
                Creates a new instance of an entity for the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
      <returns>The entity instance, which may be a proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>
                Creates a new instance of an entity for the type of this set or for a type derived
                from the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
      <param name="derivedEntityType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>derivedEntityType</parameter>
            <parameter>M:System.Data.Entity.DbSet.Create(System.Type)</parameter>
          </include>
        </markup>
      </param>
      <returns> The entity instance, which may be a proxy. </returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbSet.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.DbSet.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbSet.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
      <param name="keyValues">The values of the primary key for the entity to be found.</param>
      <returns>The entity found, or null.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbSet.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbSet.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbSet.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbSet.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>
                Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> that represents a local view of all Added, Unchanged,
                and Modified entities in this set.  This local view will stay in sync as entities are added or
                removed from the context.  Likewise, entities added to or removed from the local view will automatically
                be added to or removed from the context.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
      <param name="entity">The entity to remove.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>
                Creates a raw SQL query that will return entities in this set.  By default, the
                entities returned are tracked by the context; this can be changed by calling
                AsNoTracking on the <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> returned.
                Note that the entities returned are always of the type for this set and never of
                a derived type.  If the table or tables queried may contain data for other entity
                types, then the SQL query must be written appropriately to ensure that only entities of
                the correct type are returned.
            </summary>
      <param name="sql">The SQL query string.</param>
      <param name="parameters">The parameters to apply to the SQL query string.</param>
      <returns>A <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> object that will execute the query when it is enumerated.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>
                A DbSet represents the collection of all entities in the context, or that can be queried from the
                database, of a given type.  DbSet objects are created from a DbContext using the DbContext.Set method.
            </summary>
      <typeparam name="TEntity">The type that defines the set.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
      <param name="entity">The entity to add.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>
                Attaches the given entity to the context underlying the set.  That is, the entity is placed
                into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
      <param name="entity">The entity to attach.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>
                Creates a new instance of an entity for the type of this set or for a type derived
                from the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
      <typeparam name="TDerivedEntity">The type of entity to create.</typeparam>
      <returns> The entity instance, which may be a proxy. </returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>
                Creates a new instance of an entity for the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
      <returns>The entity instance, which may be a proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
      <param name="keyValues">The values of the primary key for the entity to be found.</param>
      <returns>The entity found, or null.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if multiple entities exist in the context with the primary key values given.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the type of entity is not part of the data model for this context.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the types of the key values do not match the types of the key values for the entity type to be found.</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the context has been disposed.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>
                Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> that represents a local view of all Added, Unchanged,
                and Modified entities in this set.  This local view will stay in sync as entities are added or
                removed from the context.  Likewise, entities added to or removed from the local view will automatically
                be added to or removed from the context.
            </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>
                Returns the equivalent non-generic <see cref="T:System.Data.Entity.DbSet" /> object.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet</parameter>
          </include>
        </markup>
      </param>
      <returns>The non-generic set object.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
      <param name="entity">The entity to remove.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>
                Creates a raw SQL query that will return entities in this set.  By default, the
                entities returned are tracked by the context; this can be changed by calling
                AsNoTracking on the <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> returned.
                Note that the entities returned are always of the type for this set and never of
                a derived type.  If the table or tables queried may contain data for other entity
                types, then the SQL query must be written appropriately to ensure that only entities of
                the correct type are returned.
            </summary>
      <param name="sql">The SQL query string.</param>
      <param name="parameters">The parameters to apply to the SQL query string.</param>
      <returns>A <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> object that will execute the query when it is enumerated.</returns>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>
                An implementation of IDatabaseInitializer that will always recreate and optionally re-seed the
                database the first time that a context is used in the app domain.
                To seed the database, create a derived class and override the Seed method.
            </summary>
      <typeparam name="TContext">The type of the context.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.DropCreateDatabaseAlways`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>
                A that should be overridden to actually add data to the context for seeding. 
                The default implementation does nothing.
            </summary>
      <param name="context">The context to seed.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>
            An implementation of IDatabaseInitializer that will <b>DELETE</b>, recreate, and optionally re-seed the
            database only if the model has changed since the database was created.
            </summary>
      <typeparam name="TContext">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TContext</parameter>
            <parameter>T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.DropCreateDatabaseIfModelChanges`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>
                A that should be overridden to actually add data to the context for seeding. 
                The default implementation does nothing.
            </summary>
      <param name="context">The context to seed.</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:System.Data.Entity.IDatabaseInitializer`1</parameter>
          </include>
        </markup>
      </summary>
      <typeparam name="TContext">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TContext</parameter>
            <parameter>T:System.Data.Entity.IDatabaseInitializer`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>
                An IDbSet represents the collection of all entities in the context, or that can be queried from the
                database, of a given type.  DbSet is a concrete implementation of IDbSet.
            </summary>
      <typeparam name="TEntity">The type that defines the set.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>
                Adds the given entity to the context underlying the set in the Added state such that it will
                be inserted into the database when SaveChanges is called.
            </summary>
      <param name="entity">The entity to add.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>
                Attaches the given entity to the context underlying the set.  That is, the entity is placed
                into the context in the Unchanged state, just as if it had been read from the database.
            </summary>
      <param name="entity">The entity to attach.</param>
      <returns>The entity.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>
                Creates a new instance of an entity for the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
      <returns>The entity instance, which may be a proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>
                Creates a new instance of an entity for the type of this set or for a type derived
                from the type of this set.
                Note that this instance is NOT added or attached to the set.
                The instance returned will be a proxy if the underlying context is configured to create
                proxies and the entity type meets the requirements for creating a proxy.
            </summary>
      <typeparam name="TDerivedEntity">The type of entity to create.</typeparam>
      <returns> The entity instance, which may be a proxy. </returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>
                Finds an entity with the given primary key values.
                If an entity with the given primary key values exists in the context, then it is
                returned immediately without making a request to the store.  Otherwise, a request
                is made to the store for an entity with the given primary key values and this entity,
                if found, is attached to the context and returned.  If no entity is found in the
                context or the store, then null is returned.
            </summary>
      <param name="keyValues">The values of the primary key for the entity to be found.</param>
      <returns>The entity found, or null.</returns>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>
                Gets an <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> that represents a local view of all Added, Unchanged,
                and Modified entities in this set.  This local view will stay in sync as entities are added or
                removed from the context.  Likewise, entities added to or removed from the local view will automatically
                be added to or removed from the context.
            </summary>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>
                Marks the given entity as Deleted such that it will be deleted from the database when SaveChanges
                is called.  Note that the entity must exist in the context in some other state before this method
                is called.
            </summary>
      <param name="entity">The entity to remove.</param>
      <returns>The entity.</returns>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>
            An implementation of <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> that will use Code First Migrations
            to update the database to the latest version.
            </summary>
      <typeparam name="TContext">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TContext</parameter>
            <parameter>T:System.Data.Entity.MigrateDatabaseToLatestVersion`2</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="TMigrationsConfiguration">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TMigrationsConfiguration</parameter>
            <parameter>T:System.Data.Entity.MigrateDatabaseToLatestVersion`2</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class. 
            </summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>
            Initializes a new instance of the MigrateDatabaseToLatestVersion class that will
            use a specific connection string from the configuration file to connect to
            the database to perform the migration.
            </summary>
      <param name="connectionStringName">The name of the connection string to use for migration.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>
                Executes the strategy to initialize the database for the given context.
            </summary>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>
                Returned by the ChangeTracker method of <see cref="T:System.Data.Entity.DbContext" /> to provide access to features of
                the context that are related to change tracking of entities.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>
                Detects changes made to the properties and relationships of POCO entities.  Note that some types of
                entity (such as change tracking proxies and entities that derive from <see cref="T:System.Data.Objects.DataClasses.EntityObject" />)
                report changes automatically and a call to DetectChanges is not normally needed for these types of entities.
                Also note that normally DetectChanges is called automatically by many of the methods of <see cref="T:System.Data.Entity.DbContext" />
                and its related classes such that it is rare that this method will need to be called explicitly.
                However, it may be desirable, usually for performance reasons, to turn off this automatic calling of
                DetectChanges using the AutoDetectChangesEnabled flag from <see cref="P:System.Data.Entity.DbContext.Configuration" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>
                Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> objects for all the entities tracked by this context.
            </summary>
      <returns>The entries.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>
                Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> objects for all the entities of the given type
                tracked by this context.
            </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <returns>The entries.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> object.
            </summary>
      <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
      <typeparam name="TElement">The type of the collection element.</typeparam>
      <returns>The equivalent generic object.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> to which this navigation property belongs.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>
                Gets a value indicating whether the collection of entities has been loaded from the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>
                Loads the collection of entities from the database.
                Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>
                Gets the property name.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>
                Returns the query that would be used to load this collection from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database, such
                as counting the number of entities in the collection in the database without actually loading them.
            </summary>
      <returns>A query for the collection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>
                Instances of this class are returned from the Collection method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> and allow operations such as loading to
                be performed on the an entity's collection navigation properties.
            </summary>
      <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
      <typeparam name="TElement">The type of the element in the collection of entities.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> to which this navigation property belongs.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>
                Gets a value indicating whether the collection of entities has been loaded from the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>
                Loads the collection of entities from the database.
                Note that entities that already exist in the context are not overwritten with values from the database.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>
                Gets the property name.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> class for 
                the navigation property represented by this object.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry</parameter>
          </include>
        </markup>
      </param>
      <returns>A non-generic version.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>
                Returns the query that would be used to load this collection from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database, such
                as counting the number of entities in the collection in the database without actually loading them.
            </summary>
      <returns>A query for the collection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>
                An immutable representation of an Entity Data Model (EDM) model that can be used to create an 
                <see cref="T:System.Data.Objects.ObjectContext" /> or can be passed to the constructor of a <see cref="T:System.Data.Entity.DbContext" />. 
                For increased performance, instances of this type should be cached and re-used to construct contexts.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>
                Creates an instance of ObjectContext or class derived from ObjectContext.  Note that an instance
                of DbContext can be created instead by using the appropriate DbContext constructor.
                If a derived ObjectContext is used, then it must have a public constructor with a single
                EntityConnection parameter.
                The connection passed is used by the ObjectContext created, but is not owned by the context.  The caller
                must dispose of the connection once the context has been disposed.
            </summary>
      <param name="existingConnection">An existing connection to a database for use by the context.</param>
      <typeparam name="TContext">The type of context to create.</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> object.
            </summary>
      <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
      <typeparam name="TComplexProperty">The type of the complex property.</typeparam>
      <returns>The equivalent generic object.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
      <param name="propertyName">The name of the nested property.</param>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
      <param name="propertyName">The name of the nested property.</param>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>
                Instances of this class are returned from the ComplexProperty method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> and allow access to the state of a complex property.
            </summary>
      <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
      <typeparam name="TComplexProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
      <param name="navigationProperty">An expression representing the nested property.</param>
      <param name="property">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>property</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TNestedComplexProperty">The type of the nested property.</typeparam>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
      <param name="propertyName">The name of the nested property.</param>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>
                Gets an object that represents a nested complex property of this property.
            </summary>
      <param name="propertyName">The name of the nested property.</param>
      <typeparam name="TNestedComplexProperty">The type of the nested property.</typeparam>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> class for 
                the property represented by this object.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry</parameter>
          </include>
        </markup>
      </param>
      <returns>A non-generic version.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
      <param name="navigationProperty">An expression representing the nested property.</param>
      <param name="property">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>property</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TNestedProperty">The type of the nested property.</typeparam>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
      <param name="propertyName">The name of the nested property.</param>
      <typeparam name="TNestedProperty">The type of the nested property.</typeparam>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>
                Gets an object that represents a nested property of this property.
                This method can be used for both scalar or complex properties.
            </summary>
      <param name="propertyName">The name of the nested property.</param>
      <returns>An object representing the nested property.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>
                Represents information about a database connection.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>
                Creates a new instance of DbConnectionInfo representing a connection that is specified in the application configuration file.
            </summary>
      <param name="connectionName">The name of the connection string in the application configuration.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>
                Creates a new instance of DbConnectionInfo based on a connection string.
            </summary>
      <param name="connectionString">The connection string to use for the connection.</param>
      <param name="providerInvariantName">The name of the provider to use for the connection. Use 'System.Data.SqlClient' for SQL Server.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>
                Describes the origin of the database connection string associated with a <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>
                The connection string was created by convention.
            </summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>
                The connection string was read from external configuration.
            </summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>
                The connection string was explicitly specified at runtime.
            </summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>
                The connection string was overriden by connection information supplied to DbContextInfo. 
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>
                Returned by the Configuration method of <see cref="T:System.Data.Entity.DbContext" /> to provide access to configuration
                options for the context.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>
                Gets or sets a value indicating whether lazy loading of relationships exposed as
                navigation properties is enabled.  Lazy loading is enabled by default.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>
                Gets or sets a value indicating whether or not the framework will create instances of
                dynamically generated proxy classes whenever it creates an instance of an entity type.
                Note that even if proxy creation is enabled with this flag, proxy instances will only
                be created for entity types that meet the requirements for being proxied.
                Proxy creation is enabled by default.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>
                Gets or sets a value indicating whether tracked entities should be validated automatically when
                <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> is invoked.
                The default value is true.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>
                Provides runtime information about a given <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
      <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext" /> type. An external config 
                object (e.g. app.config or web.config) can be supplied and will be used during connection string
                resolution. This includes looking for connection strings and DefaultConnectionFactory entries.
            </summary>
      <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">An object representing the config file.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext" />, targeting a specific database.
                An external config object (e.g. app.config or web.config) can be supplied and will be used during connection string
                resolution. This includes looking for connection strings and DefaultConnectionFactory entries.
            </summary>
      <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">An object representing the config file.</param>
      <param name="connectionInfo">Connection information for the database to be used.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext" /> type. An external config 
                object (e.g. app.config or web.config) can be supplied and will be used during connection string
                resolution. This includes looking for connection strings and DefaultConnectionFactory entries. 
                A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> can be supplied in order to override the default determined
                provider used when constructing the underlying EDM model. This can be useful to prevent EF from
                connecting to discover a manifest token.
            </summary>
      <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">An object representing the config file.</param>
      <param name="modelProviderInfo">A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> specifying the underlying ADO.NET provider to target.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext" /> type. An external list of 
                connection strings can be supplied and will be used during connection string resolution in place
                of any connection strings specified in external configuration files.
            </summary>
      <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionStringSettings">A collection of connection strings.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext" /> targeting a specific database.
            </summary>
      <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionInfo">Connection information for the database to be used.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>
                Creates a new instance representing a given <see cref="T:System.Data.Entity.DbContext" /> type.  A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />
                can be supplied in order to override the default determined provider used when constructing
                the underlying EDM model.
            </summary>
      <param name="contextType">The type deriving from <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="modelProviderInfo">A <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> specifying the underlying ADO.NET provider to target.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>
                The ADO.NET provider name of the connection used by the underlying <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>
                The connection string used by the underlying <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>
                The connection string name used by the underlying <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>
                The origin of the connection string used by the underlying <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>
                The concrete <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>
                If instances of the underlying <see cref="T:System.Data.Entity.DbContext" /> type can be created, returns
                a new instance; otherwise returns null.
            </summary>
      <returns>A <see cref="T:System.Data.Entity.DbContext" /> instance.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>
                Whether or not instances of the underlying <see cref="T:System.Data.Entity.DbContext" /> type can be created.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>
                An action to be run on the DbModelBuilder after OnModelCreating has been run on the context.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>
                Returns a new instance of the generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> class for the given
                generic type for the tracked entity represented by this object.
                Note that the type of the tracked entity must be compatible with the generic type or
                an exception will be thrown.
            </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
      <returns>A generic version.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
      <param name="navigationProperty">The name of the navigation property.</param>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
      <param name="propertyName">The name of the complex property.</param>
      <returns>An object representing the complex property.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>
                Gets the current property values for the tracked entity represented by this object.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>
                Gets the entity.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>
                Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <param name="other">The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>
                Queries the database for copies of the values of the tracked entity as they currently exist in the database.
                Note that changing the values in the returned dictionary will not update the values in the database.
                If the entity is not found in the database then null is returned.
            </summary>
      <returns>The store values.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>
                Returns a hash code for this instance.
            </summary>
      <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>
                Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> instance and returns validation result.
            </summary>
      <returns>
                Entity validation result. Possibly null if 
                <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> method is overridden.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>
                Gets an object that represents a member of the entity.  The runtime type of the returned object will
                vary depending on what kind of member is asked for.  The currently supported member types and their return
                types are:
                Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.
                Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.
                Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.
                Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.
            </summary>
      <param name="propertyName">The name of the member.</param>
      <returns>An object representing the member.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>
                Gets the original property values for the tracked entity represented by this object.
                The original values are usually the entity's property values as they were when last queried from
                the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
      <param name="propertyName">The name of the property.</param>
      <returns>An object representing the property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
      <param name="navigationProperty">The name of the navigation property.</param>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>
                Reloads the entity from the database overwriting any property values with values from the database.
                The entity will be in the Unchanged state after calling this method.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>
                Gets or sets the state of the entity.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>
                Instances of this class provide access to information about and control of entities that
                are being tracked by the <see cref="T:System.Data.Entity.DbContext" />.  Use the Entity or Entities methods of
                the context to obtain objects of this type.
            </summary>
      <typeparam name="TEntity">The type of the entity.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
      <param name="navigationProperty">An expression representing the navigation property.</param>
      <typeparam name="TElement">The type of elements in the collection.</typeparam>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
      <param name="navigationProperty">The name of the navigation property.</param>
      <typeparam name="TElement">The type of elements in the collection.</typeparam>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>
                Gets an object that represents the collection navigation property from this
                entity to a collection of related entities.
            </summary>
      <param name="navigationProperty">The name of the navigation property.</param>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
      <param name="navigationProperty">An expression representing the complex property.</param>
      <param name="property">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>property</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TComplexProperty">The type of the complex property.</typeparam>
      <returns>An object representing the complex property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
      <param name="propertyName">The name of the complex property.</param>
      <typeparam name="TComplexProperty">The type of the complex property.</typeparam>
      <returns>An object representing the complex property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>
                Gets an object that represents a complex property of this entity.
            </summary>
      <param name="propertyName">The name of the complex property.</param>
      <returns>An object representing the complex property.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>
                Gets the current property values for the tracked entity represented by this object.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>
                Gets the entity.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>
                Determines whether the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <param name="other">The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
                Two <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> instances are considered equal if they are both entries for
                the same entity on the same <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>
                Queries the database for copies of the values of the tracked entity as they currently exist in the database.
                Note that changing the values in the returned dictionary will not update the values in the database.
                If the entity is not found in the database then null is returned.
            </summary>
      <returns>The store values.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>
                Returns a hash code for this instance.
            </summary>
      <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>
                Validates this <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> instance and returns validation result.
            </summary>
      <returns>
                Entity validation result. Possibly null if 
                <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> method is overridden.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>
                Gets an object that represents a member of the entity.  The runtime type of the returned object will
                vary depending on what kind of member is asked for.  The currently supported member types and their return
                types are:
                Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.
                Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.
                Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.
                Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.
            </summary>
      <param name="propertyName">The name of the member.</param>
      <returns>An object representing the member.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>
                Gets an object that represents a member of the entity.  The runtime type of the returned object will
                vary depending on what kind of member is asked for.  The currently supported member types and their return
                types are:
                Reference navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.
                Collection navigation property: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.
                Primitive/scalar property: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.
                Complex property: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.
            </summary>
      <param name="propertyName">The name of the member.</param>
      <typeparam name="TMember">The type of the member.</typeparam>
      <returns>An object representing the member.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> class for 
                the tracked entity represented by this object.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry</parameter>
          </include>
        </markup>
      </param>
      <returns>A non-generic version.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>
                Gets the original property values for the tracked entity represented by this object.
                The original values are usually the entity's property values as they were when last queried from
                the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
      <param name="navigationProperty">An expression representing the property.</param>
      <param name="property">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>property</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>An object representing the property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
      <param name="propertyName">The name of the property.</param>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>An object representing the property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>
                Gets an object that represents a scalar or complex property of this entity.
            </summary>
      <param name="propertyName">The name of the property.</param>
      <returns>An object representing the property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
      <param name="navigationProperty">An expression representing the navigation property.</param>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
      <param name="navigationProperty">The name of the navigation property.</param>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>
                Gets an object that represents the reference (i.e. non-collection) navigation property from this
                entity to another entity.
            </summary>
      <param name="navigationProperty">The name of the navigation property.</param>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>An object representing the navigation property.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>
                Reloads the entity from the database overwriting any property values with values from the database.
                The entity will be in the Unchanged state after calling this method.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>
                Gets or sets the state of the entity.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>
                This is an abstract base class use to represent a scalar or complex property, or a navigation property
                of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />,
                reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />, and collection
                navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Infrastructure.DbMemberEntry</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> object.
            </summary>
      <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>The equivalent generic object.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>
                Gets or sets the current value of this property.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> to which this member belongs.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>
                Validates this property.
            </summary>
      <returns>
                Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError" /> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>
                Gets the name of the property.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>
                This is an abstract base class use to represent a scalar or complex property, or a navigation property
                of an entity.  Scalar and complex properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />,
                reference navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />, and collection
                navigation properties use the derived class <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.
            </summary>
      <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Infrastructure.DbMemberEntry`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>
                Gets or sets the current value of this property.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> to which this member belongs.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>
                Validates this property.
            </summary>
      <returns>
                Collection of <see cref="T:System.Data.Entity.Validation.DbValidationError" /> objects. Never null. If the entity is valid the collection will be empty.
            </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> class for 
                the property represented by this object.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry</parameter>
          </include>
        </markup>
      </param>
      <returns>A non-generic version.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>
                Represents an Entity Data Model (EDM) created by the <see cref="T:System.Data.Entity.DbModelBuilder" />.
                The Compile method can be used to go from this EDM representation to a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />
                which is a compiled snapshot of the model suitable for caching and creation of
                <see cref="T:System.Data.Entity.DbContext" /> or <see cref="T:System.Data.Objects.ObjectContext" /> instances.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>
                Creates a <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> for this mode which is a compiled snapshot
                suitable for caching and creation of <see cref="T:System.Data.Entity.DbContext" /> instances.
            </summary>
      <returns>The compiled model.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> object.
            </summary>
      <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>The equivalent generic object.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>
                Gets or sets the current value of this property.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> to which this property belongs.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>
                Gets or sets a value indicating whether the value of this property has been modified since
                it was loaded from the database.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>
                Gets the property name.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>
                Gets or sets the original value of this property.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> of the property for which this is a nested property.
                This method will only return a non-null entry for properties of complex objects; it will
                return null for properties of the entity itself.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>
                Instances of this class are returned from the Property method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> and allow access to the state of the scalar
                or complex property.
            </summary>
      <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>
                Gets or sets the current value of this property.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> to which this property belongs.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>
                Gets or sets a value indicating whether the value of this property has been modified since
                it was loaded from the database.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>
                Gets the property name.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> class for 
                the property represented by this object.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry</parameter>
          </include>
        </markup>
      </param>
      <returns>A non-generic version.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>
                Gets or sets the original value of this property.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> of the property for which this is a nested property.
                This method will only return a non-null entry for properties of complex objects; it will
                return null for properties of the entity itself.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>
                A collection of all the properties for an underlying entity or complex object.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>
                Creates a new dictionary containing copies of all the properties in this dictionary.
                Changes made to the new dictionary will not be reflected in this dictionary and vice versa.
            </summary>
      <returns>A clone of this dictionary.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>
                Gets the value of the property just like using the indexed property getter but
                typed to the type of the generic parameter.  This is useful especially with
                nested dictionaries to avoid writing expressions with lots of casts.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <typeparam name="TValue">The type of the property.</typeparam>
      <returns>The value of the property.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>
                Gets or sets the value of the property with the specified property name.
                The value may be a nested instance of this class.
            </summary>
      <param name="propertyName">The property name.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>
                Gets the set of names of all properties in this dictionary as a read-only set.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>
                Sets the values of this dictionary by reading values from another dictionary.
                The other dictionary must be based on the same type as this dictionary, or a type derived
                from the type for this dictionary.
            </summary>
      <param name="dictionary">The dictionary to read values from.</param>
      <param name="propertyValues">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>propertyValues</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>
                Sets the values of this dictionary by reading values out of the given object.
                The given object can be of any type.  Any property on the object with a name that
                matches a property name in the dictionary and can be read will be read.  Other
                properties will be ignored.  This allows, for example, copying of properties from
                simple Data Transfer Objects (DTOs).
            </summary>
      <param name="obj">The object to read values from.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>
                Creates an object of the underlying type for this dictionary and hydrates it with property
                values from this dictionary.
            </summary>
      <returns>The properties of this dictionary copied into a new object.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:System.Data.Entity.Infrastructure.DbProviderInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Infrastructure.DbProviderInfo</parameter>
          </include>
        </markup>
      </summary>
      <param name="providerInvariantName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>providerInvariantName</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="providerManifestToken">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>providerManifestToken</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>
                Represents a non-generic LINQ to Entities query against a DbContext.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <returns> A new query with NoTracking applied.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> object.
            </summary>
      <typeparam name="TElement">The type of element for which the query was created.</typeparam>
      <returns>The generic set object.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>
                The IQueryable element type.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="path">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>
                Returns a <see cref="T:System.String" /> representation of the underlying query.
            </summary>
      <returns>
                The query string.
            </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>
                Represents a LINQ to Entities query against a DbContext.
            </summary>
      <typeparam name="TResult">The type of entity to query for.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>
                Returns a new query where the entities returned will not be cached in the <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <returns> A new query with NoTracking applied.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="path">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>path</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> class for this query.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery</parameter>
          </include>
        </markup>
      </param>
      <returns>A non-generic version.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>
                Returns a <see cref="T:System.String" /> representation of the underlying query.
            </summary>
      <returns>
                The query string.
            </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
                A non-generic version of the <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>
                Returns the equivalent generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> object.
            </summary>
      <typeparam name="TEntity">The type of entity on which the member is declared.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <returns>The equivalent generic object.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> to which this navigation property belongs.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>
                Gets a value indicating whether the entity has been loaded from the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>
                Loads the entity from the database.
                Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>
                Gets the property name.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>
                Returns the query that would be used to load this entity from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
      <returns>A query for the entity.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>
                Instances of this class are returned from the Reference method of
                <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> and allow operations such as loading to
                be performed on the an entity's reference navigation properties.
            </summary>
      <typeparam name="TEntity">The type of the entity to which this property belongs.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>
                Gets or sets the current value of the navigation property.  The current value is
                the entity that the navigation property references.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>
                The <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> to which this navigation property belongs.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>
                Gets a value indicating whether the entity has been loaded from the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>
                Loads the entity from the database.
                Note that if the entity already exists in the context, then it will not overwritten with values from the database.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>
                Gets the property name.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
                Returns a new instance of the non-generic <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> class for 
                the navigation property represented by this object.
            </summary>
      <param name="entry">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entry</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry</parameter>
          </include>
        </markup>
      </param>
      <returns>A non-generic version.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>
                Returns the query that would be used to load this entity from the database.
                The returned query can be modified using LINQ to perform filtering or operations in the database.
            </summary>
      <returns>A query for the entity.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>
                Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext" /> 
                and is executed using the connection from that context.
                Instances of this class are obtained from the <see cref="T:System.Data.Entity.DbSet" /> instance for the 
                entity type. The query is not executed when this object is created; it is executed
                each time it is enumerated, for example by using foreach.
                SQL queries for non-entities are created using the <see cref="P:System.Data.Entity.DbContext.Database" />.
                See <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> for a generic version of this class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>
                Returns a new query where the results of the query will not be tracked by the associated
                <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <returns>A new query with no-tracking applied.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>
                Executes the query and returns an enumerator for the elements.
            </summary>
      <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the elements.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>
                Returns a <see cref="T:System.String" /> that contains the SQL string that was set
                when the query was created.  The parameters are not included.
            </summary>
      <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>
                Represents a SQL query for entities that is created from a <see cref="T:System.Data.Entity.DbContext" /> 
                and is executed using the connection from that context.
                Instances of this class are obtained from the <see cref="T:System.Data.Entity.DbSet`1" /> instance for the 
                entity type. The query is not executed when this object is created; it is executed
                each time it is enumerated, for example by using foreach.
                SQL queries for non-entities are created using the <see cref="P:System.Data.Entity.DbContext.Database" />.
                See <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> for a non-generic version of this class.
            </summary>
      <typeparam name="TEntity">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TEntity</parameter>
            <parameter>T:System.Data.Entity.Infrastructure.DbSqlQuery`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>
                Returns a new query where the results of the query will not be tracked by the associated
                <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <returns>A new query with no-tracking applied.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>
                Executes the query and returns an enumerator for the elements.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>
                Returns a <see cref="T:System.String" /> that contains the SQL string that was set
                when the query was created.  The parameters are not included.
            </summary>
      <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>
                Exception thrown by <see cref="T:System.Data.Entity.DbContext" /> when it was expected that SaveChanges for an entity would
                result in a database update but in fact no rows in the database were affected.  This usually indicates
                that the database has been concurrently updated such that a concurrency token that was expected to match
                did not actually match.
                Note that state entries referenced by this exception are not serialized due to security and accesses to
                the state entries after serialization will return null.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:System.Data.Entity.Infrastructure.DbUpdateException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>
                Gets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> objects that represents the entities that could not
                be saved to the database.
            </summary>
      <returns>The entries representing the entities that could not be saved.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>
                Represents an entity used to store metadata about an EDM in the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Infrastructure.EdmMetadata</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>
                Gets or sets the ID of the metadata entity, which is currently always 1.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>
                Gets or sets the model hash which is used to check whether the model has
                changed since the database was created from it.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>
                Attempts to get the model hash calculated by Code First for the given context.
                This method will return null if the context is not being used in Code First mode.
            </summary>
      <param name="context">The context.</param>
      <returns>The hash string.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>
                Contains methods used to access the Entity Data Model created by Code First in the EDMX form.
                These methods are typically used for debugging when there is a need to look at the model that
                Code First creates internally.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>
                Uses Code First with the given context and writes the resulting Entity Data Model to the given
                writer in EDMX form.  This method can only be used with context instances that use Code First
                and create the model internally.  The method cannot be used for contexts created using Database
                First or Model First, for contexts created using a pre-existing <see cref="T:System.Data.Objects.ObjectContext" />, or
                for contexts created using a pre-existing <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />.
            </summary>
      <param name="context">The context.</param>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>
                Writes the Entity Data Model represented by the given <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> to the
                given writer in EDMX form.
            </summary>
      <param name="modelaseMapping">An object representing the EDM.</param>
      <param name="writer">The writer.</param>
      <param name="model">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>model</parameter>
            <parameter>M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>
                Implementations of this interface are used to create DbConnection objects for
                a type of database server based on a given database name.  
                An Instance is set on the <see cref="T:System.Data.Entity.Database" /> class to
                cause all DbContexts created with no connection information or just a database
                name or connection string to use a certain type of database server by default.
                Two implementations of this interface are provided: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" />
                is used to create connections to Microsoft SQL Server, including EXPRESS editions.
                <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> is used to create connections to Microsoft SQL
                Server Compact Editions.
                Other implementations for other database servers can be added as needed.
                Note that implementations should be thread safe or immutable since they may
                be accessed by multiple threads at the same time.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>
                Creates a connection based on the given database name or connection string.
            </summary>
      <param name="nameOrConnectionString">The database name or connection string.</param>
      <returns>An initialized DbConnection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>
                A factory for creating derived <see cref="T:System.Data.Entity.DbContext" /> instances. Implement this 
                interface to enable design-time services for context types that do not have a 
                public default constructor.
                
                At design-time, derived <see cref="T:System.Data.Entity.DbContext" /> instances can be created in order to enable specific
                design-time experiences such as model rendering, DDL generation etc. To enable design-time instantiation
                for derived <see cref="T:System.Data.Entity.DbContext" /> types that do not have a public, default constructor, implement 
                this interface. Design-time services will auto-discover implementations of this interface that are in the
                same assembly as the derived <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
      <typeparam name="TContext">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TContext</parameter>
            <parameter>T:System.Data.Entity.Infrastructure.IDbContextFactory`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>
                Creates a new instance of a derived <see cref="T:System.Data.Entity.DbContext" /> type.
            </summary>
      <returns>An instance of TContext</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>
                This <see cref="T:System.Data.Entity.DbModelBuilder" /> convention causes DbModelBuilder to include metadata about the model 
                when it builds the model. When <see cref="T:System.Data.Entity.DbContext" /> creates a model by convention it will
                add this convention to the list of those used by the DbModelBuilder.  This will then result in
                model metadata being written to the database if the DbContext is used to create the database.
                This can then be used as a quick check to see if the model has changed since the last time it was
                used against the database.
                This convention can be removed from the <see cref="T:System.Data.Entity.DbModelBuilder" /> conventions by overriding
                the OnModelCreating method on a derived DbContext class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Infrastructure.IncludeMetadataConvention</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>
                Interface implemented by objects that can provide an <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> instance.
                The <see cref="T:System.Data.Entity.DbContext" /> class implements this interface to provide access to the underlying
                ObjectContext.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>
                Gets the object context.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>
                Instances of this class are used to create DbConnection objects for
                SQL Server LocalDb based on a given database name or connection string.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>
                Creates a new instance of the connection factory for the given version of LocalDb.
                For SQL Server 2012 LocalDb use "v11.0".
            </summary>
      <param name="localDbVersion">The LocalDb version to use.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>
                Creates a new instance of the connection factory for the given version of LocalDb.
                For SQL Server 2012 LocalDb use "v11.0".
                
            </summary>
      <param name="localDbVersion">The LocalDb version to use.</param>
      <param name="baseConnectionString">
                The connection string to use for options to the database other than the 'Initial Catalog',
                'Data Source', and 'AttachDbFilename'.
                The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the
                database name when CreateConnection is called.
                The 'Data Source' will be set based on the LocalDbVersion argument.
            </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>
                The connection string to use for options to the database other than the 'Initial Catalog',
                'Data Source', and 'AttachDbFilename'.
                The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the
                database name when CreateConnection is called.
                The 'Data Source' will be set based on the LocalDbVersion argument.
                The default is 'Integrated Security=True; MultipleActiveResultSets=True;'.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>
                Creates a connection for SQL Server LocalDb based on the given database name or connection string.
                If the given string contains an '=' character then it is treated as a full connection string,
                otherwise it is treated as a database name only.
            </summary>
      <param name="nameOrConnectionString">The database name or connection string.</param>
      <returns>An initialized DbConnection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>
                This <see cref="T:System.Data.Entity.DbModelBuilder" /> convention uses the name of the derived
                <see cref="T:System.Data.Entity.DbContext" /> class as the container for the conceptual model built by
                Code First.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>
                This <see cref="T:System.Data.Entity.DbModelBuilder" /> convention uses the namespace of the derived
                <see cref="T:System.Data.Entity.DbContext" /> class as the namespace of the conceptual model built by
                Code First.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>
                Instances of this class are used internally to create constant expressions for <see cref="T:System.Data.Objects.ObjectQuery`1" />
                that are inserted into the expression tree to  replace references to <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />
                and <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />.
            </summary>
      <typeparam name="TElement">The type of the element.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>
                The public property expected in the LINQ expression tree.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>
                Instances of this class are used to create DbConnection objects for
                SQL Server Compact Edition based on a given database name or connection string.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>
                Creates a new connection factory with empty (default) DatabaseDirectory and BaseConnectionString
                properties.
            </summary>
      <param name="providerInvariantName">The provider invariant name that specifies the version of SQL Server Compact Edition that should be used.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>
                Creates a new connection factory with the given DatabaseDirectory and BaseConnectionString properties.
            </summary>
      <param name="providerInvariantName">
                The provider invariant name that specifies the version of SQL Server Compact Edition that should be used.
            </param>
      <param name="databaseDirectory">
                The path to prepend to the database name that will form the file name used by SQL Server Compact Edition
                when it creates or reads the database file. An empty string means that SQL Server Compact Edition will use
                its default for the database file location.
            </param>
      <param name="baseConnectionString">
                The connection string to use for options to the database other than the 'Data Source'. The Data Source will
                be prepended to this string based on the database name when CreateConnection is called.
            </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>
                The connection string to use for options to the database other than the 'Data Source'.
                The Data Source will be prepended to this string based on the database name when
                CreateConnection is called.
                The default is the empty string, which means no other options will be used.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>
                Creates a connection for SQL Server Compact Edition based on the given database name or connection string.
                If the given string contains an '=' character then it is treated as a full connection string,
                otherwise it is treated as a database name only.
            </summary>
      <param name="nameOrConnectionString">The database name or connection string.</param>
      <returns>An initialized DbConnection.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>
                The path to prepend to the database name that will form the file name used by
                SQL Server Compact Edition when it creates or reads the database file.
                The default value is "|DataDirectory|", which means the file will be placed
                in the designated data directory.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>
                The provider invariant name that specifies the version of SQL Server Compact Edition
                that should be used.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>
                Instances of this class are used to create DbConnection objects for
                SQL Server based on a given database name or connection string. By default, the connection is
                made to '.\SQLEXPRESS'.  This can be changed by changing the base connection
                string when constructing a factory instance.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>
                Creates a new connection factory with a default BaseConnectionString property of
                'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>
                Creates a new connection factory with the given BaseConnectionString property.
            </summary>
      <param name="baseConnectionString">
                The connection string to use for options to the database other than the 'Initial Catalog'. The 'Initial Catalog' will
                be prepended to this string based on the database name when CreateConnection is called.
            </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>
                The connection string to use for options to the database other than the 'Initial Catalog'.
                The 'Initial Catalog' will  be prepended to this string based on the database name when
                CreateConnection is called.
                The default is 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>
                Creates a connection for SQL Server based on the given database name or connection string.
                If the given string contains an '=' character then it is treated as a full connection string,
                otherwise it is treated as a database name only.
            </summary>
      <param name="nameOrConnectionString">The database name or connection string.</param>
      <returns>An initialized DbConnection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>
                This attribute can be applied to either an entire derived <see cref="T:System.Data.Entity.DbContext" /> class or to
                individual <see cref="T:System.Data.Entity.DbSet`1" /> or <see cref="T:System.Data.Entity.IDbSet`1" /> properties on that class.  When applied
                any discovered <see cref="T:System.Data.Entity.DbSet`1" /> or <see cref="T:System.Data.Entity.IDbSet`1" /> properties will still be included
                in the model but will not be automatically initialized.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>
                Thrown when a context is generated from the <see cref="T:System.Data.Entity.DbContext" /> templates in Database First or Model
                First mode and is then used in Code First mode.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> class.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>
                Base class for code-based migrations.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.DbMigration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>
                Adds an operation to add a column to an existing table.
            </summary>
      <param name="table">
                The name of the table to add the column to.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="name">
                The name of the column to be added.
            </param>
      <param name="columnAction">
                An action that specifies the column to be added.
                i.e. c =&gt; c.Int(nullable: false, defaultValue: 3)
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>
                Adds an operation to create a new foreign key constraint.
            </summary>
      <param name="dependentTable">
                The table that contains the foreign key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="dependentColumn">The foreign key column.</param>
      <param name="principalTable">
                The table that contains the column this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="principalColumn">
                The column this foreign key references. 
                If no value is supplied the primary key of the principal table will be referenced.
            </param>
      <param name="cascadeDelete">
                A value indicating if cascade delete should be configured for the foreign key relationship.
                If no value is supplied, cascade delete will be off.
            </param>
      <param name="name">
                The name of the foreign key constraint in the database.
                If no value is supplied a unique name will be generated.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>
                Adds an operation to create a new foreign key constraint.
            </summary>
      <param name="dependentTable">
                The table that contains the foreign key columns.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="dependentColumns">The foreign key columns.</param>
      <param name="principalTable">
                The table that contains the columns this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="principalColumns">
                The columns this foreign key references. 
                If no value is supplied the primary key of the principal table will be referenced.
            </param>
      <param name="cascadeDelete">
                A value indicating if cascade delete should be configured for the foreign key relationship.
                If no value is supplied, cascade delete will be off.
            </param>
      <param name="name">
                The name of the foreign key constraint in the database.
                If no value is supplied a unique name will be generated.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>
                Adds an operation to create a new primary key.
            </summary>
      <param name="table">
                The table that contains the primary key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="column">The primary key column.</param>
      <param name="name">
                The name of the primary key in the database.
                If no value is supplied a unique name will be generated.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>
                Adds an operation to create a new primary key based on multiple columns.
            </summary>
      <param name="table">
                The table that contains the primary key columns.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="columns">The primary key columns.</param>
      <param name="name">
                The name of the primary key in the database.
                If no value is supplied a unique name will be generated.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>
                Adds an operation to alter the definition of an existing column.
            </summary>
      <param name="table">
                The name of the table the column exists in.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="name">The name of the column to be changed.</param>
      <param name="columnAction">
                An action that specifies the new definition for the column.
                i.e. c =&gt; c.String(nullable: false, defaultValue: "none")
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>
                Adds an operation to create an index on a single column.
            </summary>
      <param name="table">
                The name of the table to create the index on.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="column">The name of the column to create the index on.</param>
      <param name="unique">
                A value indicating if this is a unique index.
                If no value is supplied a non-unique index will be created.
            </param>
      <param name="name">
                The name to use for the index in the database.
                If no value is supplied a unique name will be generated.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>
                Adds an operation to create an index on multiple columns.
            </summary>
      <param name="table">
                The name of the table to create the index on.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="columns">The name of the columns to create the index on.</param>
      <param name="unique">
                A value indicating if this is a unique index.
                If no value is supplied a non-unique index will be created.
            </param>
      <param name="name">
                The name to use for the index in the database.
                If no value is supplied a unique name will be generated.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>
                Adds an operation to create a new table.
            </summary>
      <param name="name">The name of the table. Schema name is optional, if no schema is specified then dbo is assumed.</param>
      <param name="columnsAction">
                An action that specifies the columns to be included in the table.
                i.e. t =&gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
      <typeparam name="TColumns">
                The columns in this create table operation. 
                You do not need to specify this type, it will be inferred from the columnsAction parameter you supply.
            </typeparam>
      <returns>An object that allows further configuration of the table creation operation.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>
                Operations to be performed during the downgrade process.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>
                Adds an operation to drop an existing column.
            </summary>
      <param name="table">
                The name of the table to drop the column from.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="name">The name of the column to be dropped.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>
                Adds an operation to drop a foreign key constraint based on its name.
            </summary>
      <param name="dependentTable">
                The table that contains the foreign key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="name">The name of the foreign key constraint in the database.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>
                Adds an operation to drop a foreign key constraint based on the column it targets.
            </summary>
      <param name="dependentTable">
                The table that contains the foreign key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="dependentColumn">The foreign key column.</param>
      <param name="principalTable">
                The table that contains the column this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="principalColumn">The columns this foreign key references.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>
                Adds an operation to drop a foreign key constraint based on the columns it targets.
            </summary>
      <param name="dependentTable">
                The table that contains the foreign key columns.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="dependentColumns">The foreign key columns.</param>
      <param name="principalTable">
                The table that contains the columns this foreign key references.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="principalColumns">The columns this foreign key references.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>
                Adds an operation to drop an index based on its name.
            </summary>
      <param name="table">
                The name of the table to drop the index from.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="name">The name of the index to be dropped.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>
                Adds an operation to drop an index based on the columns it targets.
            </summary>
      <param name="table">
                The name of the table to drop the index from.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="columns">The name of the column(s) the index targets.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>
                Adds an operation to drop an existing primary key that was created with the default name.
            </summary>
      <param name="table">
                The table that contains the primary key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>
                Adds an operation to drop an existing primary key that does not have the default name.
            </summary>
      <param name="table">
                The table that contains the primary key column.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="name">The name of the primary key to be dropped.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>
                Adds an operation to drop a table.
            </summary>
      <param name="name">
                The name of the table to be dropped.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>
                Adds an operation to move a table to a new schema.
            </summary>
      <param name="name">
                The name of the table to be moved.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="newSchema">The schema the table is to be moved to.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>
                Adds an operation to rename a column.
            </summary>
      <param name="table">
                The name of the table that contains the column to be renamed.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="name">The name of the column to be renamed.</param>
      <param name="newName">The new name for the column.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>
                Adds an operation to rename a table. To change the schema of a table use MoveTable
            </summary>
      <param name="name">
                The name of the table to be renamed.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="newName">
                The new name for the table.
                Schema name is optional, if no schema is specified then dbo is assumed.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>
                Adds an operation to execute a SQL command.
            </summary>
      <param name="sql">The SQL to be executed.</param>
      <param name="suppressTransaction">
                A value indicating if the SQL should be executed outside of the 
                transaction being used for the migration process.
                If no value is supplied the SQL will be executed within the transaction.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>
                Operations to be performed during the upgrade process.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>
                Configuration relating to the use of migrations for a given model.
                You will typically create a configuration class that derives
                from <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> rather than 
                using this class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>
                Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>
                Gets or sets a value indicating if data loss is acceptable during automatic migration.
                If set to false an exception will be thrown if data loss may occur as part of an automatic migration.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>
                Gets or sets a value indicating if automatic migrations can be used when migration the database.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>
                Gets or sets the code generator to be used when scaffolding migrations.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>
            Gets or sets the timeout value used for the individual commands within a
            migration. A null value indicates that the default value of the underlying
            provider will be used.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>
                Gets or sets the derived DbContext representing the model to be migrated.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>
                Gets the SQL generator that is set to be used with a given database provider.
            </summary>
      <param name="providerInvariantName">Name of the database provider to get the SQL generator for.</param>
      <returns>The SQL generator that is set for the database provider.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>
                Gets or sets the assembly containing code-based migrations.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>
                Gets or sets the sub-directory that code-based migrations are stored in.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>
                Gets or sets the namespace used for code-based migrations.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>
                Adds a new SQL generator to be used for a given database provider.
            </summary>
      <param name="providerInvariantName">Name of the database provider to set the SQL generator for.</param>
      <param name="migrationSqlGenerator">The SQL generator to be used.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>
                Gets or sets a value to override the connection of the database to be migrated.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>
                Configuration relating to the use of migrations for a given model.
            </summary>
      <typeparam name="TContext">The context representing the model that this configuration applies to.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>
                Initializes a new instance of the DbMigrationsConfiguration class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>
                Runs after upgrading to the latest migration to allow seed data to be updated.
            </summary>
      <param name="context">Context to be used for updating seed data.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>
                DbMigrator is used to apply existing migrations to a database. 
                DbMigrator can be used to upgrade and downgrade to any given migration.
                To scaffold migrations based on changes to your model use <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>
                Initializes a new instance of the DbMigrator class.
            </summary>
      <param name="configuration">Configuration to be used for the migration process.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>
                Gets the configuration that is being used for the migration process.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>
                Gets all migrations that have been applied to the target database.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>
                Gets all migrations that are defined in the configured migrations assembly.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>
                Gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>
                Migration Id representing the state of the database before any migrations are applied.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>
                Updates the target database to a given migration.
            </summary>
      <param name="targetMigration">The migration to upgrade/downgrade to.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>
                A set of extension methods for <see cref="T:System.Data.Entity.IDbSet`1" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>
                Adds or updates entities by a custom identification expression when SaveChanges is called.
                Equivalent to an "upsert" operation from database terminology.
                This method can useful when seeding data using Migrations.
            </summary>
      <param name="identifierExpression">
                An expression specifying the properties that should be used when determining
                whether an Add or Update operation should be performed.
            </param>
      <param name="entities">The entities to add or update.</param>
      <param name="set">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>set</parameter>
            <parameter>M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TEntity">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TEntity</parameter>
            <parameter>M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>
                Adds or updates entities by key when SaveChanges is called. Equivalent to an "upsert" operation
                from database terminology. 
                This method can useful when seeding data using Migrations.
            </summary>
      <param name="entities">The entities to add or update.</param>
      <param name="set">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>set</parameter>
            <parameter>M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="TEntity">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TEntity</parameter>
            <parameter>M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>
                Helper class that is used to configure a column.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Builders.ColumnBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>
                Creates a new column definition to store Binary data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="maxLength">The maximum allowable length of the array data.</param>
      <param name="fixedLength">Value indicating whether or not all data should be padded to the maximum length.</param>
      <param name="isMaxLength">Value indicating whether or not the maximum length supported by the database provider should be used.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="timestamp">Value indicating whether or not this column should be configured as a timestamp.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Boolean data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Byte data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="identity">Value indicating whether or not the database will generate values for this column during insert.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store DateTime data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="precision">The precision of the column.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store DateTimeOffset data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="precision">The precision of the column.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>
                Creates a new column definition to store Decimal data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="precision">The numeric precision of the column.</param>
      <param name="scale">The numeric scale of the column.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <param name="identity">Value indicating whether or not the database will generate values for this column during insert.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Double data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store geography data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store geometry data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store GUID data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="identity">Value indicating whether or not the database will generate values for this column during insert.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Integer data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="identity">Value indicating whether or not the database will generate values for this column during insert.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Long data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="identity">Value indicating whether or not the database will generate values for this column during insert.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Short data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="identity">Value indicating whether or not the database will generate values for this column during insert.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Single data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store String data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="maxLength">The maximum allowable length of the string data.</param>
      <param name="fixedLength">Value indicating whether or not all data should be padded to the maximum length.</param>
      <param name="isMaxLength">Value indicating whether or not the maximum length supported by the database provider should be used.</param>
      <param name="unicode">Value indicating whether or not the column supports Unicode content.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>
                Creates a new column definition to store Time data.
            </summary>
      <param name="nullable">Value indicating whether or not the column allows null values.</param>
      <param name="precision">The precision of the column.</param>
      <param name="defaultValue">Constant value to use as the default value for this column.</param>
      <param name="defaultValueSql">SQL expression used as the default value for this column.</param>
      <param name="name">The name of the column.</param>
      <param name="storeType">Provider specific data type to use for this column.</param>
      <returns>The newly constructed column definition.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>
                Helper class that is used to further configure a table being created from a CreateTable call on <see cref="T:System.Data.Entity.Migrations.DbMigration" />.
            </summary>
      <typeparam name="TColumns">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TColumns</parameter>
            <parameter>T:System.Data.Entity.Migrations.Builders.TableBuilder`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>
                Initializes a new instance of the TableBuilder class.
            </summary>
      <param name="createTableOperation">The table creation operation to be further configured.</param>
      <param name="migration">The migration the table is created in.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>
                Specifies a foreign key constraint to be created on the table.
            </summary>
      <param name="principalTable">Name of the table that the foreign key constraint targets.</param>
      <param name="dependentKeyExpression">
                A lambda expression representing the properties of the foreign key. 
                C#: t =&gt; t.PropertyOne   
                VB.Net: Function(t) t.PropertyOne
            
                If multiple properties make up the foreign key then specify an anonymous type including the properties. 
                C#: t =&gt; new { t.PropertyOne, t.PropertyTwo }
                VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">
                A value indicating whether or not cascade delete should be configured on the foreign key constraint.
            </param>
      <param name="name">
                The name of this foreign key constraint.
                If no name is supplied, a default name will be calculated.
            </param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
      <returns>Itself, so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>
                Specifies an index to be created on the table.
            </summary>
      <param name="indexExpression">
                A lambda expression representing the property to be indexed. 
                C#: t =&gt; t.PropertyOne   
                VB.Net: Function(t) t.PropertyOne
            
                If multiple properties are to be indexed then specify an anonymous type including the properties. 
                C#: t =&gt; new { t.PropertyOne, t.PropertyTwo }
                VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }
            </param>
      <param name="unique">A value indicating whether or not this is a unique index.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
      <returns>Itself, so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>
                Specifies a primary key for the table.
            </summary>
      <param name="keyExpression">
                A lambda expression representing the property to be used as the primary key. 
                C#: t =&gt; t.Id   
                VB.Net: Function(t) t.Id
            
                If the primary key is made up of multiple properties then specify an anonymous type including the properties. 
                C#: t =&gt; new { t.Id1, t.Id2 }
                VB.Net: Function(t) New With { t.Id1, t.Id2 }
            </param>
      <param name="name">
                The name of the primary key.
                If null is supplied, a default name will be generated.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
      <returns>Itself, so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>
                Generates C# code for a code-based migration.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Byte" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
                Generates code to specify the default value for a <see cref="T:byte[]" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>
                Generates the primary code file that the user can view and edit.
            </summary>
      <param name="operations">Operations to be performed by the migration.</param>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <returns>The generated code.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to specify a set of column names using a lambda expression.
            </summary>
      <param name="columns">The columns to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.
            </summary>
      <param name="addColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.
            </summary>
      <param name="addForeignKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.
            </summary>
      <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.
            </summary>
      <param name="alterColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
                Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.
            </summary>
      <param name="column">The column definition to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
      <param name="emitName">A value indicating whether to include the column name in the definition.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.
            </summary>
      <param name="createIndexOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="createTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.
            </summary>
      <param name="dropColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.
            </summary>
      <param name="dropForeignKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.
            </summary>
      <param name="dropIndexOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.
            </summary>
      <param name="dropPrimaryKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.
            </summary>
      <param name="dropTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.
            </summary>
      <param name="moveTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.
            </summary>
      <param name="renameColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.
            </summary>
      <param name="renameTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.
            </summary>
      <param name="sqlOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeography" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeometry" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTime" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTimeOffset" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Decimal" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Guid" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Int64" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>
                Generates code to specify the default value for a column of unknown data type.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Single" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.String" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>
                Generates the code that should be added to the users project.
            </summary>
      <param name="migrationId">Unique identifier of the migration.</param>
      <param name="operations">Operations to be performed by the migration.</param>
      <param name="sourceModel">Source model to be stored in the migration metadata.</param>
      <param name="targetModel">Target model to be stored in the migration metadata.</param>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <returns>The generated code.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>
                Generates the code behind file with migration metadata.
            </summary>
      <param name="migrationId">Unique identifier of the migration.</param>
      <param name="sourceModel">Source model to be stored in the migration metadata.</param>
      <param name="targetModel">Target model to be stored in the migration metadata.</param>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <returns>The generated code.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.TimeSpan" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="addForeignKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="createIndexOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>
                Quotes an identifier using appropriate escaping to allow it to be stored in a string.
            </summary>
      <param name="identifier">The identifier to be quoted.</param>
      <returns>The quoted identifier.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>
                Removes any invalid characters from the name of an database artifact.
            </summary>
      <param name="name">The name to be scrubbed.</param>
      <returns>The scrubbed name.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>
                Gets the type name to use for a column of the given data type.
            </summary>
      <param name="primitiveTypeKind">The data type to translate.</param>
      <returns>The type name to use in the generated migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates the closing code for a class that was started with WriteClassStart.
            </summary>
      <param name="writer">Text writer to add the generated code to.</param>
      <param name="namespace">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>namespace</parameter>
            <parameter>M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
                Generates a namespace, using statements and class definition.
            </summary>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <param name="writer">Text writer to add the generated code to.</param>
      <param name="base">Base class for the generated class.</param>
      <param name="designer">A value indicating if this class is being generated for a code-behind file.</param>
      <param name="namespaces">Namespaces for which using directives will be added. If null, then the namespaces returned from GetDefaultNamespaces will be used.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates a property to return the source or target model in the code behind file.
            </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value to be returned.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>
                Base class for providers that generate code for code-based migrations.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Design.MigrationCodeGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>
                Generates the code that should be added to the users project.
            </summary>
      <param name="migrationId">Unique identifier of the migration.</param>
      <param name="operations">Operations to be performed by the migration.</param>
      <param name="sourceModel">Source model to be stored in the migration metadata.</param>
      <param name="targetModel">Target model to be stored in the migration metadata.</param>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <returns>The generated code.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>
            Gets the default namespaces that must be output as "using" or "Imports" directives for
            any code generated.
            </summary>
      <param name="designer">A value indicating if this class is being generated for a code-behind file.</param>
      <returns>An ordered list of namespace names.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>
            Gets the namespaces that must be output as "using" or "Imports" directives to handle
            the code generated by the given operations.
            </summary>
      <param name="operations">The operations for which code is going to be generated.</param>
      <returns>An ordered list of namespace names.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>
                Scaffolds code-based migrations to apply pending model changes to the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>
                Initializes a new instance of the MigrationScaffolder class.
            </summary>
      <param name="migrationsConfiguration">Configuration to be used for scaffolding.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>
            Gets or sets the namespace used in the migration's generated code.
            
            By default, this is the same as MigrationsNamespace on the migrations
            configuration object passed into the constructor. For VB.NET projects, this
            will need to be updated to take into account the project's root namespace.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>
                Scaffolds a code based migration to apply any pending model changes to the database.
            </summary>
      <param name="migrationName">The name to use for the scaffolded migration.</param>
      <returns>The scaffolded migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>
                Scaffolds a code based migration to apply any pending model changes to the database.
            </summary>
      <param name="migrationName">The name to use for the scaffolded migration.</param>
      <param name="ignoreChanges">Whether or not to include model changes.</param>
      <returns>The scaffolded migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>
            Scaffolds the initial code-based migration corresponding to a previously run database initializer.
            </summary>
      <returns>The scaffolded migration.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>
                Represents a code-based migration that has been scaffolded and is ready to be written to a file.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Design.ScaffoldedMigration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>
                Gets or sets the scaffolded migration code that should be stored in a code behind file.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>
                Gets or sets the subdirectory in the user's project that this migration should be saved in.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>
                Gets or sets the programming language used for this migration.
                Typically used for the file extension of the generated code.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>
                Gets or sets the unique identifier for this migration.
                Typically used for the file name of the generated code.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>
            Gets a dictionary of string resources to add to the migration resource file.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>
                Gets or sets the scaffolded migration code that the user can edit.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>
                Represents an exception that occurred while running an operation in another AppDomain in the <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>
                Initializes a new instance of the ToolingException class.
            </summary>
      <param name="message">Error that explains the reason for the exception.</param>
      <param name="innerType">The type of the exception that was thrown.</param>
      <param name="innerStackTrace">The stack trace of the exception that was thrown.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>
                Gets the stack trace of the exception that was thrown.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>
                Gets the type of the exception that was thrown.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>
                Helper class that is used by design time tools to run migrations related  
                commands that need to interact with an application that is being edited
                in Visual Studio.
            
                Because the application is being edited the assemblies need to
                be loaded in a separate AppDomain to ensure the latest version
                is always loaded.
            
                The App/Web.config file from the startup project is also copied
                to ensure that any configuration is applied.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>
                Initializes a new instance of the ToolingFacade class.
            </summary>
      <param name="assemblyName">
                The name of the assembly that contains the migrations configuration to be used.
            </param>
      <param name="configurationTypeName">
                The namespace qualified name of migrations configuration to be used.
            </param>
      <param name="workingDirectory">
                The working directory containing the compiled assemblies.
            </param>
      <param name="configurationFilePath">
                The path of the config file from the startup project.
            </param>
      <param name="dataDirectory">
                The path of the application data directory from the startup project.
                Typically the App_Data directory for web applications or the working directory for executables.
            </param>
      <param name="connectionStringInfo">
                The connection to the database to be migrated.
                If null is supplied, the default connection for the context will be used.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>
                Releases all resources used by the facade.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>
                Releases all unmanaged resources used by the facade.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>
            Gets the fully qualified name of a type deriving from <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <param name="contextTypeName">The name of the context type. If null, the single context type found in the assembly will be returned.</param>
      <returns>The context type found.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>
                Gets the fully qualified name of all types deriving from <see cref="T:System.Data.Entity.DbContext" />.
            </summary>
      <returns>All context types found.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>
                Gets a list of all migrations that have been applied to the database.
            </summary>
      <returns>Ids of applied migrations.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>
                Gets a list of all migrations that have not been applied to the database.
            </summary>
      <returns>Ids of pending migrations.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>
                Gets or sets an action to be run to log information.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>
                Gets or sets an action to be run to log verbose information.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>
                Gets or sets an action to be run to log warnings.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>
                Scaffolds a code-based migration to apply any pending model changes.
            </summary>
      <param name="migrationName">The name for the generated migration.</param>
      <param name="language">The programming language of the generated migration.</param>
      <param name="rootNamespace">The root namespace of the project the migration will be added to.</param>
      <param name="ignoreChanges">Whether or not to include model changes.</param>
      <returns>The scaffolded migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>
                Scaffolds the initial code-based migration corresponding to a previously run database initializer.
            </summary>
      <param name="language">The programming language of the generated migration.</param>
      <param name="rootNamespace">The root namespace of the project the migration will be added to.</param>
      <returns>The scaffolded migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>
                Generates a SQL script to migrate between two migrations.
            </summary>
      <param name="sourceMigration">
                The migration to update from. 
                If null is supplied, a script to update the current database will be produced.
            </param>
      <param name="targetMigration">
                The migration to update to.
                If null is supplied, a script to update to the latest migration will be produced.
            </param>
      <param name="force">Value indicating if data loss during automatic migration is acceptable.</param>
      <returns>The generated SQL script.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>
                Updates the database to the specified migration.
            </summary>
      <param name="targetMigration">
                The Id of the migration to migrate to.
                If null is supplied, the database will be updated to the latest migration.
            </param>
      <param name="force">Value indicating if data loss during automatic migration is acceptable.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>
                Generates VB.Net code for a code-based migration.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Byte" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
                Generates code to specify the default value for a <see cref="T:byte[]" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>
                Generates the primary code file that the user can view and edit.
            </summary>
      <param name="operations">Operations to be performed by the migration.</param>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <returns>The generated code.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to specify a set of column names using a lambda expression.
            </summary>
      <param name="columns">The columns to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.
            </summary>
      <param name="addColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.
            </summary>
      <param name="addForeignKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.
            </summary>
      <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.
            </summary>
      <param name="alterColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
                Generates code to specify the definition for a <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.
            </summary>
      <param name="column">The column definition to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
      <param name="emitName">A value indicating whether to include the column name in the definition.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.
            </summary>
      <param name="createIndexOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="createTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.
            </summary>
      <param name="dropColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.
            </summary>
      <param name="dropForeignKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.
            </summary>
      <param name="dropIndexOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.
            </summary>
      <param name="dropPrimaryKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.
            </summary>
      <param name="dropTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.
            </summary>
      <param name="moveTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.
            </summary>
      <param name="renameColumnOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.
            </summary>
      <param name="renameTableOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.
            </summary>
      <param name="sqlOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeography" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Data.Spatial.DbGeometry" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTime" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.DateTimeOffset" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Decimal" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Guid" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Int64" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>
                Generates code to specify the default value for a column of unknown data type.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.Single" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.String" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>
                Generates the code that should be added to the users project.
            </summary>
      <param name="migrationId">Unique identifier of the migration.</param>
      <param name="operations">Operations to be performed by the migration.</param>
      <param name="sourceModel">Source model to be stored in the migration metadata.</param>
      <param name="targetModel">Target model to be stored in the migration metadata.</param>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <returns>The generated code.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>
                Generates the code behind file with migration metadata.
            </summary>
      <param name="migrationId">Unique identifier of the migration.</param>
      <param name="sourceModel">Source model to be stored in the migration metadata.</param>
      <param name="targetModel">Target model to be stored in the migration metadata.</param>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <returns>The generated code.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
                Generates code to specify the default value for a <see cref="T:System.TimeSpan" /> column.
            </summary>
      <param name="defaultValue">The value to be used as the default.</param>
      <returns>Code representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="addForeignKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform an <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="addPrimaryKeyOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates code to perform a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> as part of a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            </summary>
      <param name="createIndexOperation">The operation to generate code for.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>
                Quotes an identifier using appropriate escaping to allow it to be stored in a string.
            </summary>
      <param name="identifier">The identifier to be quoted.</param>
      <returns>The quoted identifier.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>
                Removes any invalid characters from the name of an database artifact.
            </summary>
      <param name="name">The name to be scrubbed.</param>
      <returns>The scrubbed name.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>
                Gets the type name to use for a column of the given data type.
            </summary>
      <param name="primitiveTypeKind">The data type to translate.</param>
      <returns>The type name to use in the generated migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates the closing code for a class that was started with WriteClassStart.
            </summary>
      <param name="writer">Text writer to add the generated code to.</param>
      <param name="namespace">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>namespace</parameter>
            <parameter>M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
                Generates a namespace, using statements and class definition.
            </summary>
      <param name="namespace">Namespace that code should be generated in.</param>
      <param name="className">Name of the class that should be generated.</param>
      <param name="writer">Text writer to add the generated code to.</param>
      <param name="base">Base class for the generated class.</param>
      <param name="designer">A value indicating if this class is being generated for a code-behind file.</param>
      <param name="namespaces">Namespaces for which Imports directives will be added. If null, then the namespaces returned from GetDefaultNamespaces will be used.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Generates a property to return the source or target model in the code behind file.
            </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value to be returned.</param>
      <param name="writer">Text writer to add the generated code to.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>
                This class is used by Code First Migrations to read and write migration history
                from the database. It is not intended to be used by other code and is only public
                so that it can be accessed by EF when running under partial trust. It may be
                changed or removed in the future.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.History.HistoryRow</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>
                Gets or sets the date and time that this migrations history entry was created.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>
                Gets or sets the Id of the migration this row represents.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>
                Gets or sets the state of the model after this migration was applied.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>
                Gets or sets the version of Entity Framework that created this entry.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>
                Represents an error that occurs when an automatic migration would result in data loss.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the AutomaticDataLossException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>
                Represents an error that occurs when there are pending model changes after applying the last migration and automatic migration is disabled.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>
                Initializes a new instance of the AutomaticMigrationsDisabledException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>
                Provides additional metadata about a code-based migration.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>
                Gets the unique identifier for the migration.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>
                Gets the state of the model before this migration is run.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>
                Gets the state of the model after this migration is run.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>
            Represents errors that occur inside the Code First Migrations pipeline.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the MigrationsException class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the MigrationsException class.
            </summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>
                Base class for loggers that can be used for the migrations process.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Infrastructure.MigrationsLogger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>
                Logs an informational message.
            </summary>
      <param name="message">The message to be logged.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>
                Logs some additional information that should only be presented to the user if they request verbose output.
            </summary>
      <param name="message">The message to be logged.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>
                Logs a warning that the user should be made aware of.
            </summary>
      <param name="message">The message to be logged.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>
                Base class for decorators that wrap the core <see cref="T:System.Data.Entity.Migrations.DbMigrator" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>
                Initializes a new instance of the MigratorBase class.
            </summary>
      <param name="innerMigrator">The migrator that this decorator is wrapping.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>
                Gets the configuration being used for the migrations process.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>
                Gets a list of the migrations that have been applied to the database.
            </summary>
      <returns>List of migration Ids</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>
                Gets a list of the migrations that are defined in the assembly.
            </summary>
      <returns>List of migration Ids</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>
                Gets a list of the pending migrations that have not been applied to the database.
            </summary>
      <returns>List of migration Ids</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>
                Updates the target database to the latest migration.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>
                Updates the target database to a given migration.
            </summary>
      <param name="targetMigration">The migration to upgrade/downgrade to.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>
                Decorator to provide logging during migrations operations..
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>
                Initializes a new instance of the MigratorLoggingDecorator class.
            </summary>
      <param name="innerMigrator">The migrator that this decorator is wrapping.</param>
      <param name="logger">The logger to write messages to.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>
                Decorator to produce a SQL script instead of applying changes to the database.
                Using this decorator to wrap <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> will prevent <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> 
                from applying any changes to the target database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>
                Initializes a new instance of the  MigratorScriptingDecorator class.
            </summary>
      <param name="innerMigrator">The migrator that this decorator is wrapping.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="sourceMigration">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sourceMigration</parameter>
            <parameter>M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="targetMigration">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>targetMigration</parameter>
            <parameter>M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>
                Represents a column being added to a table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>
                Initializes a new instance of the AddColumnOperation class.
            </summary>
      <param name="table">The name of the table the column should be added to.</param>
      <param name="column">Details of the column being added.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>
                Gets the details of the column being added.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>
                Gets an operation that represents dropping the added column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>
                Gets the name of the table the column should be added to.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>
                Represents a foreign key constraint being added to a table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the AddForeignKeyOperation class.
                The PrincipalTable, PrincipalColumns, DependentTable and DependentColumns properties should also be populated.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>
                Gets or sets a value indicating if cascade delete should be configured on the foreign key constraint.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>
                Gets an operation to create an index on the foreign key column(s).
            </summary>
      <returns>An operation to add the index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>
                Gets an operation to drop the foreign key constraint.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>
                The names of the column(s) that the foreign key constraint should target.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>
                Represents adding a primary key to a table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the AddPrimaryKeyOperation class.
                The Table and Columns properties should also be populated.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>
                Gets an operation to drop the primary key.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>
                Represents altering an existing column.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>
                Initializes a new instance of the AlterColumnOperation class.
            </summary>
      <param name="table">The name of the table that the column belongs to.</param>
      <param name="column">Details of what the column should be altered to.</param>
      <param name="isDestructiveChange">Value indicating if this change will result in data loss.</param>
      <param name="inverse">An operation to revert this alteration of the column.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>
                Initializes a new instance of the AlterColumnOperation class.
            </summary>
      <param name="table">The name of the table that the column belongs to.</param>
      <param name="column">Details of what the column should be altered to.</param>
      <param name="isDestructiveChange">Value indicating if this change will result in data loss.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>
                Gets the new definition for the column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>
                Gets an operation that represents reverting the alteration.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>
                Gets the name of the table that the column belongs to.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>
                Represents information about a column.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>
                Initializes a new instance of the  class.
            </summary>
      <param name="type">The data type for this column.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>
                Initializes a new instance of the  class.
            </summary>
      <param name="type">The data type for this column.</param>
      <param name="typeUsage">
                Additional details about the data type.
                This includes details such as maximum length, nullability etc.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>
                Gets the default value for the CLR type corresponding to the database type of this column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>
                Gets the CLR type corresponding to the database type of this column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>
                Gets or sets a constant value to use as the default value for this column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>
                Gets or sets a SQL expression used as the default value for this column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>
                Gets or sets a value indicating if this column is fixed length.
                Only valid for array data types.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>
                Gets or sets a value indicating if values for this column will be generated by the database using the identity pattern.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>
                Determines if this column is a narrower data type than another column.
                Used to determine if altering the supplied column definition to this definition will result in data loss.
            </summary>
      <param name="column">The column to compare to.</param>
      <param name="providerManifest">Details of the database provider being used.</param>
      <returns>True if this column is of a narrower data type.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>
                Gets or sets a value indicating if this column can store null values.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>
                Gets or sets a value indicating if this column should be configured as a timestamp.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>
                Gets or sets a value indicating if this column supports Unicode characters.
                Only valid for textual data types.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>
                Gets or sets the maximum length for this column.
                Only valid for array data types.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>
                Gets or sets the name of the column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>
                Gets or sets the precision for this column.
                Only valid for decimal data types.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>
                Gets or sets the scale for this column.
                Only valid for decimal data types.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>
                Gets or sets a provider specific data type to use for this column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>
                Gets the data type for this column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>
                Gets additional details about the data type of this column.
                This includes details such as maximum length, nullability etc.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>
                Represents creating a database index.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the CreateIndexOperation class.
                The Table and Columns properties should also be populated.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>
                Gets an operation to drop this index.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>
                Gets or sets a value indicating if this is a unique index.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>
                Represents creating a table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>
                Initializes a new instance of the CreateTableOperation class.
            </summary>
      <param name="name">Name of the table to be created.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>
                Gets the columns to be included in the new table.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>
                Gets an operation to drop the table.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>
                Gets the name of the table to be created.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>
                Gets or sets the primary key for the new table.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>
                Represents deleting a new record from the migrations history table.
                The migrations history table is used to store a log of the migrations that have been applied to the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
                Initializes a new instance of the DeleteHistoryOperation class.
            </summary>
      <param name="table">Name of the migrations history table.</param>
      <param name="migrationId">Id of the migration record to be deleted.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>
                Represents a column being dropped from a table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>
                Initializes a new instance of the DropColumnOperation class.
            </summary>
      <param name="table">The name of the table the column should be dropped from.</param>
      <param name="name">The name of the column to be dropped.</param>
      <param name="inverse">The operation that represents reverting the drop operation.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
                Initializes a new instance of the DropColumnOperation class.
            </summary>
      <param name="table">The name of the table the column should be dropped from.</param>
      <param name="name">The name of the column to be dropped.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>
                Gets an operation that represents reverting dropping the column.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>
                Gets the name of the column to be dropped.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>
                Gets the name of the table the column should be dropped from.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>
                Represents a foreign key constraint being dropped from a table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>
                Initializes a new instance of the DropForeignKeyOperation class.
            </summary>
      <param name="inverse">The operation that represents reverting dropping the foreign key constraint.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the DropForeignKeyOperation class.
                The PrincipalTable, DependentTable and DependentColumns properties should also be populated.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>
                Gets an operation to drop the associated index on the foreign key column(s).
            </summary>
      <returns>An operation to drop the index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>
                Gets an operation that represents reverting dropping the foreign key constraint.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>
                Represents dropping an existing index.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>
                Initializes a new instance of the DropIndexOperation class.
            </summary>
      <param name="inverse">The operation that represents reverting dropping the index.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the DropIndexOperation class.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>
                Gets an operation that represents reverting dropping the index.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>
                Represents dropping a primary key from a table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the DropPrimaryKeyOperation class.
                The Table and Columns properties should also be populated.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>
                Gets an operation to add the primary key.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>
                Represents dropping an existing table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>
                Initializes a new instance of the DropTableOperation class.
            </summary>
      <param name="name">The name of the table to be dropped.</param>
      <param name="inverse">An operation that represents reverting dropping the table.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>
                Initializes a new instance of the DropTableOperation class.
            </summary>
      <param name="name">The name of the table to be dropped.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>
                Gets an operation that represents reverting dropping the table.
                The inverse cannot be automatically calculated, 
                if it was not supplied to the constructor this property will return null.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>
                Gets the name of the table to be dropped.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>
                Base class for changes that affect foreign key constraints.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the ForeignKeyOperation class.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>
                The names of the foreign key column(s).
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>
                Gets or sets the name of the table that the foreign key columns exist in.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>
                Gets a value indicating if a specific name has been supplied for this foreign key constraint.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>
                Gets or sets the name of this foreign key constraint.
                If no name is supplied, a default name will be calculated.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>
                Gets or sets the name of the table that the foreign key constraint targets.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>
                Common base class for operations that affect the migrations history table.
                The migrations history table is used to store a log of the migrations that have been applied to the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
                Initializes a new instance of the HistoryOperation class.
            </summary>
      <param name="table">Name of the migrations history table.</param>
      <param name="migrationId">Name of the migration being affected.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>
                Gets the name of the migration being affected.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>
                Gets the name of the migrations history table.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>
                Common base class for operations affecting indexes.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the IndexOperation class.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>
                Gets or sets the columns that are indexed.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>
                Gets a value indicating if a specific name has been supplied for this index.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>
                Gets or sets the name of this index.
                If no name is supplied, a default name will be calculated.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>
                Gets or sets the table the index belongs to.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>
                Represents inserting a new record into the migrations history table.
                The migrations history table is used to store a log of the migrations that have been applied to the database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>
                Initializes a new instance of the InsertHistoryOperation class.
            </summary>
      <param name="table">Name of the migrations history table.</param>
      <param name="migrationId">Id of the migration record to be inserted.</param>
      <param name="model">Value to be stored in the model column.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>
                Gets the value to store in the history table representing the target model of the migration.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>
                Gets the value to store in the history table indicating the version of Entity Framework used to produce this migration.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>
                Represents an operation to modify a database schema.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the MigrationOperation class.
            </summary>
      <param name="anonymousArguments">
             
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>
                Gets additional arguments that may be processed by providers.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>
                Gets an operation that will revert this operation.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>
                Represents moving a table from one schema to another.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
                Initializes a new instance of the MoveTableOperation class.
            </summary>
      <param name="name">Name of the table to be moved.</param>
      <param name="newSchema">Name of the schema to move the table to.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>
                Gets an operation that moves the table back to its original schema.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>
                Gets the name of the table to be moved.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>
                Gets the name of the schema to move the table to.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>
                Common base class to represent operations affecting primary keys.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>
                Initializes a new instance of the PrimaryKeyOperation class.
            </summary>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>
                Gets the column(s) that make up the primary key.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>
                Gets a value indicating if a specific name has been supplied for this primary key.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>
                Gets or sets the name of this primary key.
                If no name is supplied, a default name will be calculated.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>
                Gets or sets the name of the table that contains the primary key.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>
                Represents renaming an existing column.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>
                Initializes a new instance of the RenameColumnOperation class.
            </summary>
      <param name="table">Name of the table the column belongs to.</param>
      <param name="name">Name of the column to be renamed.</param>
      <param name="newName">New name for the column.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>
                Gets an operation that reverts the rename.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>
                Gets the name of the column to be renamed.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>
                Gets the new name for the column.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>
                Gets the name of the table the column belongs to.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>
                Represents renaming an existing table.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
                Initializes a new instance of the RenameTableOperation class.
            </summary>
      <param name="name">Name of the table to be renamed.</param>
      <param name="newName">New name for the table.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>
                Gets an operation that reverts the rename.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>
                Gets the name of the table to be renamed.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>
                Gets the new name for the table.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>
                Represents a provider specific SQL statement to be executed directly against the target database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>
                Initializes a new instance of the SqlOperation class.
            </summary>
      <param name="sql">The SQL to be executed.</param>
      <param name="anonymousArguments">
                Additional arguments that may be processed by providers. 
                Use anonymous type syntax to specify arguments e.g. 'new { SampleArgument = "MyValue" }'.
            </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>
                Gets a value indicating if this operation may result in data loss.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>
                Gets the SQL to be executed.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>
                Gets or sets a value indicating whether this statement should be performed outside of
                the transaction scope that is used to make the migration process transactional.
                If set to true, this operation will not be rolled back if the migration process fails.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>
                Common base class for providers that convert provider agnostic migration 
                operations into database provider specific SQL commands.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Sql.MigrationSqlGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>
                Converts a set of migration operations into database provider specific SQL.
            </summary>
      <param name="migrationOperations">The operations to be converted.</param>
      <param name="providerManifestToken">Token representing the version of the database being targeted.</param>
      <returns>A list of SQL statements to be executed to perform the migration operations.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>
                Represents a migration operation that has been translated into a SQL statement.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Sql.MigrationStatement</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>
                Gets or sets the SQL to be executed to perform this migration operation.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>
                Gets or sets a value indicating whether this statement should be performed outside of
                the transaction scope that is used to make the migration process transactional.
                If set to true, this operation will not be rolled back if the migration process fails.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>
                Provider to convert provider agnostic migration operations into SQL commands 
                that can be run against Microsoft SQL Server Compact Edition.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>
                Creates an empty connection for the current provider.
                Allows derived providers to use connection other than <see cref="T:System.Data.SqlClient.SqlConnection" />.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="alterColumnOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="dropColumnOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="dropIndexOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="moveTableOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="renameColumnOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="renameTableOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>
                Generates SQL to specify a constant DateTime default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>
                Generates SQL to create a database schema.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="createTableOperation">The name of the schema to create.</param>
      <param name="schema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>schema</parameter>
            <parameter>M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>
                Generates SQL to mark a table as a system table.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="createTableOperation">The table to mark as a system table.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>
                Generates a quoted name. The supplied name may or may not contain the schema.
            </summary>
      <param name="name">The name to be quoted.</param>
      <returns>The quoted name.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>
                Provider to convert provider agnostic migration operations into SQL commands 
                that can be run against a Microsoft SQL Server database.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>
                Generates SQL to specify the data type of a column.
                This method just generates the actual type, not the SQL to create the column.
            </summary>
      <param name="defaultValue">The definition of the column.</param>
      <param name="column">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>column</parameter>
            <parameter>M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)</parameter>
          </include>
        </markup>
      </param>
      <returns>SQL representing the data type.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>
                Creates an empty connection for the current provider.
                Allows derived providers to use connection other than <see cref="T:System.Data.SqlClient.SqlConnection" />.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>
                Generates SQL to specify a constant bool default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>
                Generates SQL to specify a constant byte[] default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>
                Converts a set of migration operations into Microsoft SQL Server specific SQL.
            </summary>
      <param name="migrationOperations">The operations to be converted.</param>
      <param name="providerManifestToken">Token representing the version of SQL Server being targeted (i.e. "2005", "2008").</param>
      <returns>A list of SQL statements to be executed to perform the migration operations.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="addColumnOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="addForeignKeyOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="addPrimaryKeyOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="alterColumnOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="createIndexOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="createTableOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="deleteHistoryOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="dropColumnOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="dropForeignKeyOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="dropIndexOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="dropPrimaryKeyOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="dropTableOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="insertHistoryOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="moveTableOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="renameColumnOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="renameTableOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>
                Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="sqlOperation">The operation to produce SQL for.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>
                Generates SQL to specify a constant geogrpahy default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>
                Generates SQL to specify a constant geometry default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>
                Generates SQL to specify a constant DateTime default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>
                Generates SQL to specify a constant DateTimeOffset default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>
                Generates SQL to specify a constant Guid default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>
                Generates SQL to specify a constant default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>
                Generates SQL to specify a constant string default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>
                Generates SQL to specify a constant TimeSpan default value being set on a column.
                This method just generates the actual value, not the SQL to set the default value.
            </summary>
      <param name="defaultValue">The value to be set.</param>
      <returns>SQL representing the default value.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>
                Generates SQL to create a database schema.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="createTableOperation">The name of the schema to create.</param>
      <param name="schema">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>schema</parameter>
            <parameter>M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>
                Generates SQL to mark a table as a system table.
                Generated SQL should be added using the Statement method.
            </summary>
      <param name="createTableOperation">The table to mark as a system table.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>
                Generates a quoted name. The supplied name may or may not contain the schema.
            </summary>
      <param name="name">The name to be quoted.</param>
      <returns>The quoted name.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>
                Quotes an identifier for SQL Server.
            </summary>
      <param name="identifier">The identifier to be quoted.</param>
      <returns>The quoted identifier.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
                Adds a new Statement to be executed against the database.
            </summary>
      <param name="writer">The writer containing the SQL to be executed.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>
                Adds a new Statement to be executed against the database.
            </summary>
      <param name="sql">The statement to be executed.</param>
      <param name="suppressTransaction">
                Gets or sets a value indicating whether this statement should be performed outside of
                the transaction scope that is used to make the migration process transactional.
                If set to true, this operation will not be rolled back if the migration process fails.
            </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>
                Gets a new <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> that can be used to build SQL.
            
                This is just a helper method to create a writer. Writing to the writer will
                not cause SQL to be registered for execution. You must pass the generated
                SQL to the Statement method.
            </summary>
      <returns>An empty text writer to use for SQL generation.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>
                The same as <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> but works in partial trust.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
                Initializes a new instance of the IndentedTextWriter class using the specified text writer and default tab string.
            </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to use for output. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>
                Initializes a new instance of the IndentedTextWriter class using the specified text writer and tab string.
            </summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> to use for output. </param>
      <param name="tabString">The tab string to use for indentation. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>
                Closes the document being written to.
            </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>
                Specifies the default tab string. This field is constant.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>
                Gets the encoding for the text writer to use.
            </summary>
      <returns>
                An <see cref="T:System.Text.Encoding" /> that indicates the encoding for the text writer to use.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>
                Flushes the stream.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>
                Gets or sets the number of spaces to indent.
            </summary>
      <returns>
                The number of spaces to indent.
            </returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>
                Gets the <see cref="T:System.IO.TextWriter" /> to use.
            </summary>
      <returns>
                The <see cref="T:System.IO.TextWriter" /> to use.
            </returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>
                Gets or sets the new line character to use.
            </summary>
      <returns>
                The new line character to use.
            </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>
                Outputs the tab string once for each level of indentation according to the <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> property.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>
                Writes the text representation of a Boolean value to the text stream.
            </summary>
      <param name="value">The Boolean value to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>
                Writes a character to the text stream.
            </summary>
      <param name="value">The character to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>
                Writes a character array to the text stream.
            </summary>
      <param name="buffer">The character array to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>
                Writes a subarray of characters to the text stream.
            </summary>
      <param name="buffer">The character array to write data from. </param>
      <param name="index">Starting index in the buffer. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>
                Writes the text representation of a Double to the text stream.
            </summary>
      <param name="value">The double to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>
                Writes the text representation of an integer to the text stream.
            </summary>
      <param name="value">The integer to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>
                Writes the text representation of an 8-byte integer to the text stream.
            </summary>
      <param name="value">The 8-byte integer to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>
                Writes the text representation of an object to the text stream.
            </summary>
      <param name="value">The object to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>
                Writes the text representation of a Single to the text stream.
            </summary>
      <param name="value">The single to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>
                Writes the specified string to the text stream.
            </summary>
      <param name="s">The string to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>
                Writes out a formatted string, using the same semantics as specified.
            </summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">The object to write into the formatted string. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
                Writes out a formatted string, using the same semantics as specified.
            </summary>
      <param name="format">The formatting string to use. </param>
      <param name="arg0">The first object to write into the formatted string. </param>
      <param name="arg1">The second object to write into the formatted string. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>
                Writes out a formatted string, using the same semantics as specified.
            </summary>
      <param name="format">The formatting string to use. </param>
      <param name="arg">The argument array to output. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>
                Writes a line terminator.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>
                Writes the text representation of a Boolean, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">The Boolean to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>
                Writes a character, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">The character to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>
                Writes a character array, followed by a line terminator, to the text stream.
            </summary>
      <param name="buffer">The character array to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>
                Writes a subarray of characters, followed by a line terminator, to the text stream.
            </summary>
      <param name="buffer">The character array to write data from. </param>
      <param name="index">Starting index in the buffer. </param>
      <param name="count">The number of characters to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>
                Writes the text representation of a Double, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">The double to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>
                Writes the text representation of an integer, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">The integer to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>
                Writes the text representation of an 8-byte integer, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">The 8-byte integer to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>
                Writes the text representation of an object, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">The object to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>
                Writes the text representation of a Single, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">The single to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>
                Writes the specified string, followed by a line terminator, to the text stream.
            </summary>
      <param name="s">The string to write. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>
                Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
      <param name="format">The formatting string. </param>
      <param name="arg0">The object to write into the formatted string. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
                Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
      <param name="format">The formatting string to use. </param>
      <param name="arg0">The first object to write into the formatted string. </param>
      <param name="arg1">The second object to write into the formatted string. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>
                Writes out a formatted string, followed by a line terminator, using the same semantics as specified.
            </summary>
      <param name="format">The formatting string to use. </param>
      <param name="arg">The argument array to output. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>
                Writes the text representation of a UInt32, followed by a line terminator, to the text stream.
            </summary>
      <param name="value">A UInt32 to output. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>
                Writes the specified string to a line without tabs.
            </summary>
      <param name="s">The string to write. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>
                Allows configuration to be performed for an complex type in a model.
            
                A ComplexTypeConfiguration can be obtained via the ComplexType method on
                <see cref="T:System.Data.Entity.DbModelBuilder" /> or a custom type derived from ComplexTypeConfiguration
                can be registered via the Configurations property on <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
      <typeparam name="TComplexType">The complex type to be configured.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>
                Initializes a new instance of ComplexTypeConfiguration
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>
                Allows configuration to be performed for an entity type in a model.
            
                An EntityTypeConfiguration can be obtained via the Entity method on
                <see cref="T:System.Data.Entity.DbModelBuilder" /> or a custom type derived from EntityTypeConfiguration
                can be registered via the Configurations property on <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
      <typeparam name="TEntityType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>TEntityType</parameter>
            <parameter>T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>
                Initializes a new instance of EntityTypeConfiguration
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>
                Configures the entity set name to be used for this entity type.
                The entity set name can only be configured for the base type in each set.
            </summary>
      <param name="entitySetName">The name of the entity set.</param>
      <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Configures the primary key property(s) for this entity type.
            </summary>
      <param name="keyExpression">
                A lambda expression representing the property to be used as the primary key. 
                C#: t =&gt; t.Id   
                VB.Net: Function(t) t.Id
            
                If the primary key is made up of multiple properties then specify an anonymous type including the properties. 
                C#: t =&gt; new { t.Id1, t.Id2 }
                VB.Net: Function(t) New With { t.Id1, t.Id2 }
            </param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>
                Configures a many relationship from this entity type.
            </summary>
      <param name="navigationPropertyExpression">
                A lambda expression representing the navigation property for the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <typeparam name="TTargetEntity">The type of the entity at the other end of the relationship.</typeparam>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Configures an optional relationship from this entity type.
                Instances of the entity type will be able to be saved to the database without this relationship being specified.
                The foreign key in the database will be nullable.
            </summary>
      <param name="navigationPropertyExpression">
                A lambda expression representing the navigation property for the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <typeparam name="TTargetEntity">The type of the entity at the other end of the relationship.</typeparam>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Configures a required relationship from this entity type.
                Instances of the entity type will not be able to be saved to the database unless this relationship is specified.
                The foreign key in the database will be non-nullable.
            </summary>
      <param name="navigationPropertyExpression">
                A lambda expression representing the navigation property for the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <typeparam name="TTargetEntity">The type of the entity at the other end of the relationship.</typeparam>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>
                Allows advanced configuration related to how a derived entity type is mapped to the database schema.
                Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
      <param name="derivedTypeMapConfigurationAction">An action that performs configuration against an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <typeparam name="TDerived">The derived entity type to be configured.</typeparam>
      <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>
                Allows advanced configuration related to how this entity type is mapped to the database schema.
                By default, any configuration will also apply to any type derived from this entity type.
            
                Derived types can be configured via the overload of Map that configures a derived type or
                by using an EntityTypeConfiguration for the derived type.
            
                The properties of an entity can be split between multiple tables using multiple Map calls.
            
                Calls to Map are additive, subsequent calls will not override configuration already preformed via Map.
            </summary>
      <param name="entityMappingConfigurationAction">An action that performs configuration against an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <returns>The same EntityTypeConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>
                Configures the table name that this entity type is mapped to.
            </summary>
      <param name="tableName">The name of the table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>
                Configures the table name that this entity type is mapped to.
            </summary>
      <param name="tableName">The name of the table.</param>
      <param name="schemaName">The database schema of the table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>
                Exception thrown by <see cref="T:System.Data.Entity.DbModelBuilder" /> during model creation when an invalid model is generated.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>
                Initializes a new instance of ModelValidationException
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.ModelConfiguration.ModelValidationException</parameter>
          </include>
        </markup>
      </summary>
      <param name="info">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>info</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
      <param name="context">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>context</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>
                Initializes a new instance of ModelValidationException
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of ModelValidationException
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>
                Base class for performing configuration of a relationship.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>
                Used to configure a <see cref="T:System.byte[]" /> property of an entity type or complex type.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>
                Configures the name of the database column used to store the property.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
      <param name="columnOrder">The order that this column should appear in the database table.</param>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>
                Configures the data type of the database column used to store the property.
            </summary>
      <param name="columnType">Name of the database provider specific data type.</param>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>
                Configures how values for the property are generated by the database.
            </summary>
      <param name="databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>
                Configures the property to have the specified maximum length.
            </summary>
      <param name="value">
                The maximum length for the property.
                Setting 'null' will remove any maximum length restriction from the property.
            </param>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
      <param name="concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>
                Configures the property to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>
                Configures the property to allow the maximum length supported by the database provider.
            </summary>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
                <see cref="T:System.byte[]" /> properties are optional by default.
            </summary>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
            </summary>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>
                Configures the property to be a row version in the database.
                The actual data type will vary depending on the database provider being used.
                Setting the property to be a row version will automatically configure it to be an
                optimistic concurrency token.
            </summary>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>
                Configures the property to be variable length.
                <see cref="T:System.byte[]" /> properties are variable length by default.
            </summary>
      <returns>The same BinaryPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>
                Configures a relationship that can support cascade on delete functionality.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>
                Configures cascade delete to be on for the relationship.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>
                Configures whether or not cascade delete is on for the relationship.
            </summary>
      <param name="value">Value indicating if cascade delete is on or not.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>
                Allows derived configuration classes for entities and complex types to be registered with a <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>
                Adds an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> to the <see cref="T:System.Data.Entity.DbModelBuilder" />.
                Only one <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> can be added for each type in a model.
            </summary>
      <param name="complexTypeConfiguration">The complex type configuration to be added</param>
      <typeparam name="TComplexType">The complex type being configured.</typeparam>
      <returns>The same ConfigurationRegistrar instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>
                Adds an <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> to the <see cref="T:System.Data.Entity.DbModelBuilder" />.
                Only one <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> can be added for each type in a model.
            </summary>
      <param name="entityTypeConfiguration">The entity type configuration to be added.</param>
      <typeparam name="TEntityType">The entity type being configured.</typeparam>
      <returns>The same ConfigurationRegistrar instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>
                Allows the conventions used by a <see cref="T:System.Data.Entity.DbModelBuilder" /> instance to be customized.
                Currently removal of one or more default conventions is the only supported operation.
                The default conventions can be found in the System.Data.Entity.ModelConfiguration.Conventions namespace.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>
                Disables a convention for the <see cref="T:System.Data.Entity.DbModelBuilder" />.
                The default conventions that are available for removal can be found in the System.Data.Entity.ModelConfiguration.Conventions namespace.
            </summary>
      <typeparam name="TConvention">The type of the convention to be disabled.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>
                Used to configure a <see cref="T:System.DateTime" /> property of an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>
                Configures the name of the database column used to store the property.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
      <param name="columnOrder">The order that this column should appear in the database table.</param>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>
                Configures the data type of the database column used to store the property.
            </summary>
      <param name="columnType">Name of the database provider specific data type.</param>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>
                Configures how values for the property are generated by the database.
            </summary>
      <param name="databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>
                Configures the precision of the property.
                If the database provider does not support precision for the data type of the column then the value is ignored.
            </summary>
      <param name="value">Precision of the property.</param>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
      <param name="concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
            </summary>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
                <see cref="T:System.DateTime" /> properties are required by default.
            </summary>
      <returns>The same DateTimePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>
                Used to configure a <see cref="T:System.decimal" /> property of an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>
                Configures the name of the database column used to store the property.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
      <param name="columnOrder">The order that this column should appear in the database table.</param>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>
                Configures the data type of the database column used to store the property.
            </summary>
      <param name="columnType">Name of the database provider specific data type.</param>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>
                Configures how values for the property are generated by the database.
            </summary>
      <param name="databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>
                Configures the precision and scale of the property.
            </summary>
      <param name="precision">The precision of the property.</param>
      <param name="scale">The scale of the property.</param>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
      <param name="concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
            </summary>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
                <see cref="T:System.decimal" /> properties are required by default.
            </summary>
      <returns>The same DecimalPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>
                Configures a relationship that can support foreign key properties that are exposed in the object model.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
      <typeparam name="TDependentEntityType">The dependent entity type.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Configures the relationship to use foreign key property(s) that are exposed in the object model.
                If the foreign key property(s) are not exposed in the object model then use the Map method.
            </summary>
      <param name="foreignKeyExpression">
                A lambda expression representing the property to be used as the foreign key. 
                If the foreign key is made up of multiple properties then specify an anonymous type including the properties. 
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the principal entity type.
            </param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>
                Configures the table and column mapping for an entity type or a sub-set of properties from an entity type.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
      <typeparam name="TEntityType">The entity type to be mapped.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>
                Re-maps all properties inherited from base types.
            
                When configuring a derived type to be mapped to a separate table this will cause all properties to 
                be included in the table rather than just the non-inherited properties. This is known as
                Table per Concrete Type (TPC) mapping.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Configures the properties that will be included in this mapping fragment.
                If this method is not called then all properties that have not yet been 
                included in a mapping fragment will be configured.
            </summary>
      <param name="propertiesExpression">
                A lambda expression to an anonymous type that contains the properties to be mapped.
                C#: t =&gt; new { t.Id, t.Property1, t.Property2 }
                VB.Net: Function(t) New With { p.Id, t.Property1, t.Property2 }
            </param>
      <typeparam name="TObject">An anonymous type including the properties to be mapped.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Configures the discriminator condition used to differentiate between types in an inheritance hierarchy.
            </summary>
      <param name="property">
                A lambda expression representing the property being used to discriminate between types.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <typeparam name="TProperty">The type of the property being used to discriminate between types.</typeparam>
      <returns>A configuration object to further configure the discriminator condition.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>
                Configures the discriminator column used to differentiate between types in an inheritance hierarchy.
            </summary>
      <param name="discriminator">The name of the discriminator column.</param>
      <returns>A configuration object to further configure the discriminator column and values.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>
                Configures the table name to be mapped to.
            </summary>
      <param name="tableName">Name of the table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>
                Configures the table name and schema to be mapped to.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="schemaName">Schema of the table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>
                Configures the table and column mapping of a relationship that does not expose foreign key properties in the object model.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)</parameter>
          </include>
        </markup>
      </summary>
      <param name="other">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>
                Configures the name of the column(s) for the foreign key.
            </summary>
      <param name="keyColumnNames">
                The foreign key column names.
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the target entity type.
            </param>
      <returns>The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>
                Configures the table name that the foreign key column(s) reside in.
                The table that is specified must already be mapped for the entity type.
            
                If you want the foreign key(s) to reside in their own table then use the Map method
                on <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> to perform 
                entity splitting to create the table with just the primary key property. Foreign keys can 
                then be added to the table via this method.
            </summary>
      <param name="tableName">Name of the table.</param>
      <returns>The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>
                Configures the table name and schema that the foreign key column(s) reside in.
                The table that is specified must already be mapped for the entity type.
            
                If you want the foreign key(s) to reside in their own table then use the Map method
                on <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> to perform 
                entity splitting to create the table with just the primary key property. Foreign keys can 
                then be added to the table via this method.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="schemaName">Schema of the table.</param>
      <returns>The same ForeignKeyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>
                Configures a relationship that can only support foreign key properties that are not exposed in the object model.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>
                Configures the relationship to use foreign key property(s) that are not exposed in the object model.
                The column(s) and table can be customized by specifying a configuration action.
                If an empty configuration action is specified then column name(s) will be generated by convention.
                If foreign key properties are exposed in the object model then use the HasForeignKey method.
                Not all relationships support exposing foreign key properties in the object model.
            </summary>
      <param name="configurationAction">Action that configures the foreign key column(s) and table.</param>
      <returns>
                A configuration object that can be used to further configure the relationship.
            </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>
                Used to configure a property with length facets for an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>
                Configures the property to have the specified maximum length.
            </summary>
      <param name="value">
                The maximum length for the property.
                Setting 'null' will remove any maximum length restriction from the property and a default length will be used for the database column.
            </param>
      <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>
                Configures the property to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
      <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>
                Configures the property to allow the maximum length supported by the database provider.
            </summary>
      <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>
                Configures the property to be variable length.
                Properties are variable length by default.
            </summary>
      <returns>The same LengthPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>
                Configures a many relationship from an entity type.
            </summary>
      <typeparam name="TEntityType">The entity type that the relationship originates from.</typeparam>
      <typeparam name="TTargetEntityType">The entity type that the relationship targets.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>
                Configures the relationship to be many:many without a navigation property on the other side of the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>
                Configures the relationship to be many:many with a navigation property on the other side of the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>
                Configures the relationship to be many:optional without a navigation property on the other side of the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be many:optional with a navigation property on the other side of the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>
                Configures the relationship to be many:required without a navigation property on the other side of the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be many:required with a navigation property on the other side of the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>
                Configures the table and column mapping of a many:many relationship.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)</parameter>
          </include>
        </markup>
      </summary>
      <param name="other">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>other</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>
                Configures the name of the column(s) for the left foreign key.
                The left foreign key represents the navigation property specified in the HasMany call.
            </summary>
      <param name="keyColumnNames">
                The foreign key column names.
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the target entity type.
            </param>
      <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>
                Configures the name of the column(s) for the right foreign key.
                The right foreign key represents the navigation property specified in the WithMany call.
            </summary>
      <param name="keyColumnNames">
                The foreign key column names.
                When using multiple foreign key properties, the properties must be specified in the same order that the
                the primary key properties were configured for the target entity type.
            </param>
      <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>
                Configures the join table name for the relationship.
            </summary>
      <param name="tableName">Name of the table.</param>
      <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>
                Configures the join table name and schema for the relationship.
            </summary>
      <param name="tableName">Name of the table.</param>
      <param name="schemaName">Schema of the table.</param>
      <returns>The same ManyToManyAssociationMappingConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary>
                Configures a many:many relationship.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>
                Configures the foreign key column(s) and table used to store the relationship.
            </summary>
      <param name="configurationAction">Action that configures the foreign key column(s) and table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>
                Configures a condition used to discriminate between types in an inheritance hierarchy based on the values assigned to a property.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>
                Configures the condition to require a value in the property.
            
                Rows that do not have a value assigned to column that this property is stored in are 
                assumed to be of the base type of this entity type.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>
                Configures an optional relationship from an entity type.
            </summary>
      <typeparam name="TEntityType">The entity type that the relationship originates from.</typeparam>
      <typeparam name="TTargetEntityType">The entity type that the relationship targets.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>
                Configures the relationship to be optional:many without a navigation property on the other side of the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>
                Configures the relationship to be optional:many with a navigation property on the other side of the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>
                Configures the relationship to be optional:optional without a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be optional:optional with a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>
                Configures the relationship to be optional:optional without a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be optional:optional with a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
      <param name="navigationPropertyExpression">
                A lambda expression representing the navigation property on the other end of the relationship.
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>
                Configures the relationship to be optional:required without a navigation property on the other side of the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be optional:required with a navigation property on the other side of the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </summary>
      <param name="columnOrder">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>columnOrder</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="columnType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>columnType</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>
                Used to configure a primitive property of an entity type or complex type. 
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>
                Configures the name of the database column used to store the property.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
      <param name="columnOrder">The order that this column should appear in the database table.</param>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>
                Configures the data type of the database column used to store the property.
            </summary>
      <param name="columnType">Name of the database provider specific data type.</param>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>
                Configures how values for the property are generated by the database.
            </summary>
      <param name="databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
      <param name="concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
            </summary>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
            </summary>
      <returns>The same PrimitivePropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>
                Configures an required relationship from an entity type.
            </summary>
      <typeparam name="TEntityType">The entity type that the relationship originates from.</typeparam>
      <typeparam name="TTargetEntityType">The entity type that the relationship targets.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>
                Configures the relationship to be required:many without a navigation property on the other side of the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>
                Configures the relationship to be required:many with a navigation property on the other side of the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>
                Configures the relationship to be required:optional without a navigation property on the other side of the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be required:optional with a navigation property on the other side of the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>
                Configures the relationship to be required:required without a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be required:required with a navigation property on the other side of the relationship.
                The entity type being configured will be the dependent and contain a foreign key to the principal. 
                The entity type that the relationship targets will be the principal in the relationship.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>
                Configures the relationship to be required:required without a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>
                Configures the relationship to be required:required with a navigation property on the other side of the relationship.
                The entity type being configured will be the principal in the relationship. 
                The entity type that the relationship targets will be the dependent and contain a foreign key to the principal.
            </summary>
      <param name="navigationPropertyExpression">
                An lambda expression representing the navigation property on the other end of the relationship.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to further configure the relationship.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>
                Configures a database column used to store a string values.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>
                Configures the order of the database column.
            </summary>
      <param name="columnOrder">The order that this column should appear in the database table.</param>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>
                Configures the data type of the database column.
            </summary>
      <param name="columnType">Name of the database provider specific data type.</param>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>
                Configures the column to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>
                Configures the column to allow the maximum length supported by the database provider.
            </summary>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>
                Configures the column to be optional.
            </summary>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>
                Configures the column to be required.
            </summary>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>
                Configures the column to support Unicode string content.
            </summary>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>
                Configures whether or not the column supports Unicode string content.
            </summary>
      <param name="unicode">
                Value indicating if the column supports Unicode string content or not.
                Specifying 'null' will remove the Unicode facet from the column.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>
                Configures the column to be variable length.
                Columns are variable length by default.
            </summary>
      <returns>The same StringColumnConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>
                Used to configure a <see cref="T:System.string" /> property of an entity type or complex type.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>
                Configures the name of the database column used to store the property.
            </summary>
      <param name="columnName">The name of the column.</param>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>
                Configures the order of the database column used to store the property.
                This method is also used to specify key ordering when an entity type has a composite key.
            </summary>
      <param name="columnOrder">The order that this column should appear in the database table.</param>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>
                Configures the data type of the database column used to store the property.
            </summary>
      <param name="columnType">Name of the database provider specific data type.</param>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>
                Configures how values for the property are generated by the database.
            </summary>
      <param name="databaseGeneratedOption">
                The pattern used to generate values for the property in the database.
                Setting 'null' will remove the database generated pattern facet from the property.
                Setting 'null' will cause the same runtime behavior as specifying 'None'.
            </param>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>
                Configures the property to have the specified maximum length.
            </summary>
      <param name="value">
                The maximum length for the property.
                Setting 'null' will remove any maximum length restriction from the property and a default length will be used for the database column..
            </param>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>
                Configures the property to be used as an optimistic concurrency token.
            </summary>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>
                Configures whether or not the property is to be used as an optimistic concurrency token.
            </summary>
      <param name="concurrencyToken">
                Value indicating if the property is a concurrency token or not.
                Specifying 'null' will remove the concurrency token facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>
                Configures the property to be fixed length.
                Use HasMaxLength to set the length that the property is fixed to.
            </summary>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>
                Configures the property to allow the maximum length supported by the database provider.
            </summary>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>
                Configures the property to be optional.
                The database column used to store this property will be nullable.
                <see cref="T:System.string" /> properties are optional by default.
            </summary>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>
                Configures the property to be required.
                The database column used to store this property will be non-nullable.
            </summary>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>
                Configures the property to support Unicode string content.
            </summary>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>
                Configures whether or not the property supports Unicode string content.
            </summary>
      <param name="unicode">
                Value indicating if the property supports Unicode string content or not.
                Specifying 'null' will remove the Unicode facet from the property.
                Specifying 'null' will cause the same runtime behavior as specifying 'false'.
            </param>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>
                Configures the property to be variable length.
                <see cref="T:System.string" /> properties are variable length by default.
            </summary>
      <returns>The same StringPropertyConfiguration instance so that multiple calls can be chained.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>
                Allows configuration to be performed for a type in a model.
            </summary>
      <typeparam name="TStructuralType">The type to be configured.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Excludes a property from the model so that it will not be mapped to the database.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <typeparam name="TProperty">The type of the property to be ignored.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>
                Configures a <see cref="T:System.byte[]" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>
              Configures a <see cref="T:DbGeography" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
              A lambda expression representing the property to be configured.
              C#: t =&gt; t.MyProperty   
              VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>
              Configures a <see cref="T:DbGeometry" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
              A lambda expression representing the property to be configured.
              C#: t =&gt; t.MyProperty   
              VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>
                Configures a <see cref="T:System.DateTime" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>
                Configures a <see cref="T:System.DateTimeOffset" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>
                Configures a <see cref="T:System.decimal" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>
                Configures a <see cref="T:System.DateTime?" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>
                Configures a <see cref="T:System.DateTimeOffset?" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>
                Configures a <see cref="T:System.decimal?" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>
                Configures a <see cref="T:System.TimeSpan?" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>
                Configures a <see cref="T:System.struct?" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <typeparam name="T">The type of the property being configured.</typeparam>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>
                Configures a <see cref="T:System.string" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>
                Configures a <see cref="T:System.TimeSpan" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>
                Configures a <see cref="T:System.struct" /> property that is defined on this type.
            </summary>
      <param name="propertyExpression">
                A lambda expression representing the property to be configured.
                C#: t =&gt; t.MyProperty   
                VB.Net: Function(t) t.MyProperty
            </param>
      <typeparam name="T">The type of the property being configured.</typeparam>
      <returns>A configuration object that can be used to configure the property.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>
                Configures a discriminator column used to differentiate between types in an inheritance hierarchy.
                This configuration functionality is available via the Code First Fluent API, see <see cref="T:System.Data.Entity.DbModelBuilder" />.
            </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="obj">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>obj</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>
                Configures the discriminator value used to identify the entity type being 
                configured from other types in the inheritance hierarchy.
            </summary>
      <param name="value">The value to be used to identify the entity type.</param>
      <typeparam name="T">Type of the discriminator value.</typeparam>
      <returns>A configuration object to configure the column used to store discriminator values.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>
                Configures the discriminator value used to identify the entity type being 
                configured from other types in the inheritance hierarchy.
            </summary>
      <param name="value">The value to be used to identify the entity type.</param>
      <returns>A configuration object to configure the column used to store discriminator values.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>
                Configures the discriminator value used to identify the entity type being 
                configured from other types in the inheritance hierarchy.
            </summary>
      <param name="value">The value to be used to identify the entity type.</param>
      <typeparam name="T">Type of the discriminator value.</typeparam>
      <returns>A configuration object to configure the column used to store discriminator values.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>
                Convention to detect navigation properties to be inverses of each other when only one pair 
                of navigation properties exists between the related types.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> found on properties in the model
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary>
                Convention to convert any data types that were explicitly specified, via data annotations or <see cref="T:System.Data.Entity.DbModelBuilder" /> API, 
                to be lower case. The default SqlClient provider is case sensitive and requires data types to be lower case. This convention
                allows the <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttrbiute" /> and <see cref="T:System.Data.Entity.DbModelBuilder" /> API to be case insensitive.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> found on types in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>
                Convention to configure a type as a complex type if it has no primary key, no mapped base type and no navigation properties.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>
                Convention to set precision to 18 and scale to 2 for decimal properties.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>
                Convention to move primary key properties to appear first.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>
                Convention to distinguish between optional and required relationships based on CLR nullability of the foreign key property.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> found on navigation properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> found on foreign key properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>
                Identifies conventions that can be removed from a <see cref="T:System.Data.Entity.DbModelBuilder" /> instance.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>
                Convention to detect primary key properties. 
                Recognized naming patterns in order of precedence are:
                1. 'Id'
                2. [type name]Id
                Primary key detection is case insensitive.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>
                Convention to add a cascade delete to the join table from both tables involved in a many to many relationship.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>
                Convention to ensure an invalid/unsupported mapping is not created when mapping inherited properties
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>
                Convention to discover foreign key properties whose names are a combination
                of the dependent navigation property name and the principal type primary key property name(s).
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> found on types in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>
                Convention to enable cascade delete for any required relationships.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>
                Convention to configure the primary key(s) of the dependent entity type as foreign key(s) in a one:one relationship.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>
                Convention to set the entity set name to be a pluralized version of the entity type name.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>
                Convention to set the table name to be a pluralized version of the entity type name.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>
                Convention to discover foreign key properties whose names match the principal type primary key property name(s).
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>
                Convention to set a default maximum length of 128 for properties whose type supports length facets.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> found on navigation properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> found on primitive properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>
                Convention to set a default maximum length of 4000 for properties whose type supports length facets when SqlCe is the provider.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>
                Convention to configure integer primary keys to be identity.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> found on types in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>
                Convention to process instances of <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> found on properties in the model.
            </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>
                Convention to discover foreign key properties whose names are a combination
                of the principal type name and the principal type primary key property name(s).
            </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>
                Exception thrown from <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> when validating entities fails.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
      <param name="message">The exception message.</param>
      <param name="entityValidationResults">Validation results.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
      <param name="message">The exception message.</param>
      <param name="entityValidationResults">Validation results.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of DbEntityValidationException
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>
                Validation results.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>
                Represents validation results for single entity.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> class.
            </summary>
      <param name="entry">
                Entity entry the results applies to. Never null.
            </param>
      <param name="validationErrors">
                List of <see cref="T:System.Data.Entity.Validation.DbValidationError" /> instances. Never null. Can be empty meaning the entity is valid.
            </param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>
                Gets an instance of <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> the results applies to.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>
                Gets an indicator if the entity is valid.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>
                Gets validation errors. Never null.
            </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>
                Exception thrown from <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> when an exception is thrown from the validation
                code.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>
                Initializes a new instance of DbUnexpectedValidationException
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
                Initializes a new instance of DbUnexpectedValidationException with the specified serialization info and
                context.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>
                Initializes a new instance of DbUnexpectedValidationException
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>
                Initializes a new instance of DbUnexpectedValidationException
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>
                Validation error. Can be either entity or property level validation error.
            </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>
                Creates an instance of <see cref="T:System.Data.Entity.Validation.DbValidationError" />.
            </summary>
      <param name="propertyName">Name of the invalid property. Can be null.</param>
      <param name="errorMessage">Validation error message. Can be null.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>
                Gets validation error message.
            </summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>
                Gets name of the invalid property.
            </summary>
    </member>
  </members>
</doc>