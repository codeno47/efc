<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Experion.Client.Common</name>
  </assembly>
  <members>
    <member name="T:Experion.Client.Common.Base.ModelBase">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.Base.ModelBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ModelBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ModelBase" /> class.
            </summary>
    </member>
    <member name="E:Experion.Client.Common.Base.ModelBase.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ModelBase.RaisePropertyChanged(System.String)">
      <summary>
            Raises the property changed.
            </summary>
      <param name="popertyName">Name of the poperty.</param>
    </member>
    <member name="T:Experion.Client.Common.Base.ViewModel">
      <summary>
            ViewModel Base class.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel.#ctor(Microsoft.Practices.Unity.IUnityContainer,Experion.Client.Common.Base.ModelBase)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel" /> class.
            </summary>
      <param name="container">The container.</param>
      <param name="model">The model.</param>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel.MainWindow">
      <summary>
            Gets the main window of application.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel.Model">
      <summary>
            Gets the Model.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel.Unity">
      <summary>
            Gets or sets the unity.
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Base.ViewModel`1">
      <summary>
            ViewModel Base class.
            </summary>
      <typeparam name="TInstance">The type of the instance.</typeparam>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`1.#ctor(`0,Microsoft.Practices.Unity.IUnityContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
      <param name="model">The model.</param>
      <param name="container">The container.</param>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`1.MainWindow">
      <summary>
            Gets the main window of application.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`1.Model">
      <summary>
            Gets the model.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`1.OnDispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`1.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`1.Unity">
      <summary>
            Gets or sets the unity.
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Base.ViewModel`2">
      <summary>
            ViewModel Base class.
            </summary>
      <typeparam name="TInstance">The type of the instance.</typeparam>
      <typeparam name="TParam">Business controller. </typeparam>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`2.#ctor(`0,`1)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
      <param name="controller">The controller.</param>
      <param name="businessController">The controller.</param>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`2.#ctor(`1)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
      <param name="businessController">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>businessController</parameter>
            <parameter>M:Experion.Client.Common.Base.ViewModel`2.#ctor(`1)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`2.BusinessController">
      <summary>
            Gets the business controller.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`2.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`2.MainWindow">
      <summary>
            Gets the main window of application.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`2.OnDispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`2.ScreenController">
      <summary>
            Gets the controller.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`2.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Base.ViewModel`3">
      <summary>
            ViewModel Base class.
            </summary>
      <typeparam name="TInstance">The type of the instance.</typeparam>
      <typeparam name="TData">Model. </typeparam>
      <typeparam name="TParam">Business controller. </typeparam>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`3.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`3.#ctor(`2)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
      <param name="model">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>model</parameter>
            <parameter>M:Experion.Client.Common.Base.ViewModel`3.#ctor(`2)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`3.#ctor(`0,`2)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`1" /> class.
            </summary>
      <param name="controller">The controller.</param>
      <param name="model">The controller.</param>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`3.#ctor(`0,`1,`2)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.ViewModel`3" /> class.
            </summary>
      <param name="controller">The controller.</param>
      <param name="businessController">The business controller.</param>
      <param name="model">The model.</param>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`3.BusinessController">
      <summary>
            Gets the business controller.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`3.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`3.MainWindow">
      <summary>
            Gets the main window of application.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`3.Model">
      <summary>
            Gets the business controller.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.ViewModel`3.OnDispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`3.ScreenController">
      <summary>
            Gets the controller.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.ViewModel`3.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Base.Controllers.ControllerBase">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.Base.Controllers.ControllerBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.Controllers.ControllerBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.Controllers.ControllerBase" /> class.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.Controllers.ControllerBase.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.Controllers.ControllerBase.MainWindow">
      <summary>
            Gets the main window of application.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.Controllers.ControllerBase.Unity">
      <summary>
            Gets the unity container.
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Base.Controllers.IBusinessController">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.Base.Controllers.IBusinessController</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.Controllers.IBusinessController.Unity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Base.Controllers.IBusinessController.Unity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Experion.Client.Common.Base.Controllers.IController">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.Base.Controllers.IController</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Base.Controllers.IController.Unity">
      <summary>
            Gets the unity container.
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Base.Controllers.MvcControllerBase">
      <summary>
            Controller base class.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Base.Controllers.MvcControllerBase.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Base.Controllers.MvcControllerBase" /> class.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="P:Experion.Client.Common.Base.Controllers.MvcControllerBase.Container">
      <summary>
            Gets or sets the container.
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Collection.NotifiableCollection`1">
      <summary>
            NotifiableCollection.
            </summary>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>T:Experion.Client.Common.Collection.NotifiableCollection`1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:Experion.Client.Common.Collection.NotifiableCollection`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Experion.Client.Common.Collection.NotifiableCollection`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Collection.NotifiableCollection`1.ClearItems">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.ClearItems</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Collection.NotifiableCollection`1.InsertItem(System.Int32,`0)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.InsertItem(System.Int32,`0)</parameter>
          </include>
        </markup>
      </summary>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.InsertItem(System.Int32,`0)</parameter>
          </include>
        </markup>
      </param>
      <param name="item">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>item</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.InsertItem(System.Int32,`0)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="E:Experion.Client.Common.Collection.NotifiableCollection`1.ItemChanged">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>E:Experion.Client.Common.Collection.NotifiableCollection`1.ItemChanged</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Collection.NotifiableCollection`1.RemoveItem(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.RemoveItem(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.RemoveItem(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Experion.Client.Common.Collection.NotifiableCollection`1.SetItem(System.Int32,`0)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.SetItem(System.Int32,`0)</parameter>
          </include>
        </markup>
      </summary>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.SetItem(System.Int32,`0)</parameter>
          </include>
        </markup>
      </param>
      <param name="item">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>item</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifiableCollection`1.SetItem(System.Int32,`0)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:Experion.Client.Common.Collection.NotifyCollectionChangeEventArgs">
      <summary>
            NotifyCollectionChangeEventArgs.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Collection.NotifyCollectionChangeEventArgs.#ctor(System.Int32,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Experion.Client.Common.Collection.NotifyCollectionChangeEventArgs</parameter>
          </include>
        </markup>
      </summary>
      <param name="index">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>index</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifyCollectionChangeEventArgs.#ctor(System.Int32,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="propertyName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>propertyName</parameter>
            <parameter>M:Experion.Client.Common.Collection.NotifyCollectionChangeEventArgs.#ctor(System.Int32,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:Experion.Client.Common.Collection.NotifyCollectionChangeEventArgs.Index">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Collection.NotifyCollectionChangeEventArgs.Index</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Experion.Client.Common.DataModel.ProgressBarData">
      <summary>
            ProgressBarData.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.DataModel.ProgressBarData.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Experion.Client.Common.DataModel.ProgressBarData</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.DataModel.ProgressBarData.Description">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.DataModel.ProgressBarData.Description</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.DataModel.ProgressBarData.IsVisible">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.DataModel.ProgressBarData.IsVisible</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.DataModel.ProgressBarData.maximum">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.DataModel.ProgressBarData.maximum</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.DataModel.ProgressBarData.value">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.DataModel.ProgressBarData.value</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Experion.Client.Common.Enums.Messages">
      <summary>
            Class to store string message constants..
            </summary>
    </member>
    <member name="F:Experion.Client.Common.Enums.Messages.MainWindowClosing"></member>
    <member name="F:Experion.Client.Common.Enums.Messages.Login"></member>
    <member name="F:Experion.Client.Common.Enums.Messages.Logout"></member>
    <member name="F:Experion.Client.Common.Enums.Messages.LoginSuccess"></member>
    <member name="F:Experion.Client.Common.Enums.Messages.LogoutSuccess"></member>
    <member name="F:Experion.Client.Common.Enums.Messages.Exit"></member>
    <member name="T:Experion.Client.Common.Settings.ApplicationSettings">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.Settings.ApplicationSettings</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Settings.ApplicationSettings.GetConnectionString">
      <summary>
            Gets the connection string.
            </summary>
      <returns>Connection string.</returns>
    </member>
    <member name="M:Experion.Client.Common.Settings.ApplicationSettings.GetConnectionStringForAdapter">
      <summary>
            Gets the connection string for adapter.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Experion.Client.Common.Settings.ApplicationSettings.GetConnectionStringForAdapter</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Experion.Client.Common.Settings.ApplicationSettings.GetConnectionStringForCrmModel">
      <summary>
            Gets the connection string for CRM model.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Experion.Client.Common.Settings.ApplicationSettings.GetConnectionStringForCrmModel</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Experion.Client.Common.Settings.ApplicationSettings.GetConnectionStringForV2Model">
      <summary>
            Gets the connection string for v2 model.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Experion.Client.Common.Settings.ApplicationSettings.GetConnectionStringForV2Model</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Experion.Client.Common.Settings.ApplicationSettings.GetQuickBookCompanyFile">
      <summary>
            Gets the quick book company file.
            </summary>
      <returns>Company file name.</returns>
    </member>
    <member name="T:Experion.Client.Common.Threading.TaskProgressReporter">
      <summary> 
            A class used by Tasks to report progress or completion updates back to the UI. 
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.#ctor">
      <summary> 
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Threading.TaskProgressReporter" /> class.
            This should be run on a UI thread. 
            </summary>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterCancelledHandler(System.Threading.Tasks.Task,System.Action)">
      <summary> 
            Registers a UI thread handler for when the specified task is cancelled. 
            </summary>
      <param name="task">The task to monitor for cancellation.</param>
      <param name="action">The action to take when the task is cancelled, in the context of the UI thread.</param>
      <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterCancelledHandler``1(System.Threading.Tasks.Task{``0},System.Action)">
      <summary> 
            Registers a UI thread handler for when the specified task is cancelled. 
            </summary>
      <param name="task">The task to monitor for cancellation.</param>
      <param name="action">The action to take when the task is cancelled, in the context of the UI thread.</param>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <returns>The continuation created to handle cancellation. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterContinuation(System.Threading.Tasks.Task,System.Action)">
      <summary> 
            Registers a UI thread handler for when the specified task finishes execution,
            whether it finishes with success, failiure, or cancellation. 
            </summary>
      <param name="task">The task to monitor for completion.</param>
      <param name="action">The action to take when the task has completed, in the context of the UI thread.</param>
      <returns>The continuation created to handle completion. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterContinuation``1(System.Threading.Tasks.Task{``0},System.Action)">
      <summary> 
            Registers a UI thread handler for when the specified task finishes execution,
            whether it finishes with success, failiure, or cancellation. 
            </summary>
      <param name="task">The task to monitor for completion.</param>
      <param name="action">The action to take when the task has completed, in the context of the UI thread.</param>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <returns>The continuation created to handle completion. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterFaultedHandler(System.Threading.Tasks.Task,System.Action{System.Exception})">
      <summary> 
            Registers a UI thread handler for when the specified task becomes faulted. 
            </summary>
      <param name="task">The task to monitor for faulting.</param>
      <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
      <returns>The continuation created to handle faulting. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterFaultedHandler``1(System.Threading.Tasks.Task{``0},System.Action{System.Exception})">
      <summary> 
            Registers a UI thread handler for when the specified task becomes faulted. 
            </summary>
      <param name="task">The task to monitor for faulting.</param>
      <param name="action">The action to take when the task has faulted, in the context of the UI thread.</param>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <returns>The continuation created to handle faulting. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterSucceededHandler(System.Threading.Tasks.Task,System.Action)">
      <summary> 
            Registers a UI thread handler for when the specified task successfully finishes execution. 
            </summary>
      <param name="task">The task to monitor for successful completion.</param>
      <param name="action">The action to take when the task has successfully completed, in the context of the UI thread.</param>
      <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.RegisterSucceededHandler``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
      <summary> 
            Registers a UI thread handler for when the specified task successfully finishes execution
            and returns a result. 
            </summary>
      <param name="task">The task to monitor for successful completion.</param>
      <param name="action">The action to take when the task has successfully completed, in the context of the UI thread.
            The argument to the action is the return value of the task.</param>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <returns>The continuation created to handle successful completion. This is normally ignored.</returns>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.ReportProgress(System.Action)">
      <summary> 
            Reports the progress to the UI thread, and waits for the UI thread to process
            the update before returning. This method should be called from the task. 
            </summary>
      <param name="action">The action to perform in the context of the UI thread.</param>
    </member>
    <member name="M:Experion.Client.Common.Threading.TaskProgressReporter.ReportProgressAsync(System.Action)">
      <summary> 
            Reports the progress to the UI thread. This method should be called from the task.
            Note that the progress update is asynchronous with respect to the reporting Task.
            For a synchronous progress update, wait on the returned <see cref="T:System.Threading.Tasks.Task" />. 
            </summary>
      <param name="action">The action to perform in the context of the UI thread.
            Note that this action is run asynchronously on the UI thread.</param>
      <returns>The task queued to the UI thread.</returns>
    </member>
    <member name="P:Experion.Client.Common.Threading.TaskProgressReporter.Scheduler">
      <summary> 
            Gets the task scheduler which executes tasks on the UI thread. 
            </summary>
    </member>
    <member name="T:Experion.Client.Common.Tree.TreeNode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.Tree.TreeNode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Tree.TreeNode.#ctor(Experion.Client.Common.Tree.TreeNode)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Tree.TreeNode" /> class.
            </summary>
      <param name="Name">The name.</param>
      <param name="node">Tree node. </param>
    </member>
    <member name="M:Experion.Client.Common.Tree.TreeNode.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Experion.Client.Common.Tree.TreeNode" /> class.
            </summary>
      <param name="Name">The name.</param>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.Background">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.Background</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.Id">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.Id</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.ImageSource">
      <summary>
            Gets or sets the name of the image.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.IsExpanded">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.IsExpanded</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.IsItemsLoaded">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.IsItemsLoaded</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.IsSelected">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.IsSelected</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.Name">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.Name</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.Parent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.Parent</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="E:Experion.Client.Common.Tree.TreeNode.PropertyChanged">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>E:Experion.Client.Common.Tree.TreeNode.PropertyChanged</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.Tree.TreeNode.Reset">
      <summary>
            Resets this instance.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.ToolTip">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.ToolTip</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.ToolTipText">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.ToolTipText</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Experion.Client.Common.Tree.TreeNode.TreeItems">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:Experion.Client.Common.Tree.TreeNode.TreeItems</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Experion.Client.Common.WorkItem.IWorkItem">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.WorkItem.IWorkItem</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Experion.Client.Common.WorkItem.WorkItem">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:Experion.Client.Common.WorkItem.WorkItem</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.WorkItem.WorkItem.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Experion.Client.Common.WorkItem.WorkItem</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Experion.Client.Common.WorkItem.WorkItem.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Experion.Client.Common.WorkItem.WorkItem.OnWorkItemDispose">
      <summary>
            Called when [work item dispose].
            </summary>
    </member>
    <member name="M:Experion.Client.Common.WorkItem.WorkItem.OnWorkItemStart">
      <summary>
            Called when [work item start].
            </summary>
    </member>
    <member name="M:Experion.Client.Common.WorkItem.WorkItem.Start">
      <summary>
            Starts this instance.
            </summary>
    </member>
    <member name="P:Experion.Client.Common.WorkItem.WorkItem.Unity">
      <summary>
            Gets or sets the unity.
            </summary>
    </member>
  </members>
</doc>