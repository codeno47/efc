// ----------------------------------------------------------------------------
// <copyright company="EFC" file ="EventSubscriptionConfigurationElement.cs">
// All rights reserved Copyright 2015  Enterprise Foundation Classes
// 
// </copyright>
//  <summary>
//  The <see cref="EventSubscriptionConfigurationElement.cs"/> file.
//  </summary>
//  ---------------------------------------------------------------------------------------------
namespace EFC.Components.Events.Unity.Configuration
{
    using System;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    /// <summary>
    /// The event subscription configuration element.
    /// </summary>
    public class EventSubscriptionConfigurationElement : EventBrokerConfigurationElement
    {
        #region Fields

        /// <summary>
        /// Constant representing handler attribute of the XML element.
        /// </summary>
        private const string HandlerAttribute = "handler";

        /// <summary>
        /// Constant representing threadOption attribute of the XML element.
        /// </summary>
        private const string ThreadOptionAttribute = "threadOption";

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the name of the handler mehod.
        /// </summary>
        /// <value>The name of the handler mehod.</value>
        [ConfigurationProperty(HandlerAttribute, IsRequired = true)]
        public string HandlerMethodName
        {
            get { return (string)base[HandlerAttribute]; }
            set { base[HandlerAttribute] = value; }
        }

        /// <summary>
        /// Gets or sets the thread option.
        /// </summary>
        /// <value>The thread option.</value>
        [ConfigurationProperty(ThreadOptionAttribute, IsRequired = false)]
        public ThreadOption? ThreadOption
        {
            get { return (ThreadOption?)base[ThreadOptionAttribute]; }
            set { base[ThreadOptionAttribute] = value; }
        }

        /// <summary>
        /// Each element must have a unique key, which is generated by the subclasses.
        /// </summary>
        public override string Key
        {
            get { return string.Concat(this.Subject, ":", this.HandlerMethodName); }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Return the set of <see cref="InjectionMember"/>s that are needed
        /// to configure the container according to this configuration element.
        /// </summary>
        /// <param name="container">Container that is being configured.</param>
        /// <param name="fromType">Type that is being registered.</param>
        /// <param name="targetType">Type that <paramref name="fromType"/> is being mapped to.</param>
        /// <param name="name">Name this registration is under.</param>
        /// <returns>One or more <see cref="InjectionMember"/> objects that should be
        /// applied to the container registration.</returns>
        public override System.Collections.Generic.IEnumerable<InjectionMember> GetInjectionMembers(IUnityContainer container, Type fromType, Type targetType, string name)
        {
            SubscriptionInfo subscriptionInfo;
            if (this.ThreadOption.HasValue)
            {
                subscriptionInfo = new SubscriptionInfo(this.Subject, this.HandlerMethodName, this.ThreadOption.Value);
            }
            else
            {
                subscriptionInfo = new SubscriptionInfo(this.Subject, this.HandlerMethodName);
            }

            return new[] { new EventSubscriptionInjectionMember(subscriptionInfo, container) };
        }

        #endregion
    }
}
