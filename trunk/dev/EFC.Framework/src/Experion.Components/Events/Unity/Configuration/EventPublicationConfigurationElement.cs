namespace EFC.Components.Events.Unity.Configuration
{
    using System;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    /// <summary>
    /// The event publication configuration element.
    /// </summary>
    public class EventPublicationConfigurationElement : EventBrokerConfigurationElement
    {
        #region Fields

        /// <summary>
        /// Constant representing event attribute of the XML element.
        /// </summary>
        private const string EventAttribute = "event";

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the name of the event.
        /// </summary>
        /// <value>The name of the event.</value>
        [ConfigurationProperty(EventAttribute)]
        public string EventName
        {
            get { return (string)base[EventAttribute]; }
            set { base[EventAttribute] = value; }
        }

        /// <summary>
        /// Each element must have a unique key, which is generated by the subclasses.
        /// </summary>
        public override string Key
        {
            get { return string.Concat(this.Subject, ":", this.EventName); }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Return the set of <see cref="InjectionMember"/>s that are needed
        /// to configure the container according to this configuration element.
        /// </summary>
        /// <param name="container">Container that is being configured.</param>
        /// <param name="fromType">Type that is being registered.</param>
        /// <param name="targetType">Type that <paramref name="fromType"/> is being mapped to.</param>
        /// <param name="name">Name this registration is under.</param>
        /// <returns>One or more <see cref="InjectionMember"/> objects that should be
        /// applied to the container registration.</returns>
        public override System.Collections.Generic.IEnumerable<InjectionMember> GetInjectionMembers(IUnityContainer container, Type fromType, Type targetType, string name)
        {
            PublicationInfo publicationInfo = new PublicationInfo(this.Subject, this.EventName);
            return new[] { new EventPublicationInjectionMember(publicationInfo, container) };
        }

        #endregion
    }
}
