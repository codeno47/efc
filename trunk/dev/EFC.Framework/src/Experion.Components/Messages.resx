<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyExistingCredentials" xml:space="preserve">
    <value>Credentials with key {0} already exists.</value>
  </data>
  <data name="ArgumentEmptyCollection" xml:space="preserve">
    <value>Argument must contain at least one element.</value>
  </data>
  <data name="ArgumentEmptyString" xml:space="preserve">
    <value>Argument cannot be empty.</value>
  </data>
  <data name="ArgumentNotAnInterface" xml:space="preserve">
    <value>Argument is not an interface type.</value>
  </data>
  <data name="ArgumentNotAssignable" xml:space="preserve">
    <value>'{0}' is not assignable from '{1}'.</value>
  </data>
  <data name="ArgumentNotExpectedType" xml:space="preserve">
    <value>Argument is not of the expected type '{0}'.</value>
  </data>
  <data name="ArgumentNullElement" xml:space="preserve">
    <value>Argument cannot contain a null element.</value>
  </data>
  <data name="AsyncCompleted" xml:space="preserve">
    <value>Async object already completed.</value>
  </data>
  <data name="AsyncEnded" xml:space="preserve">
    <value>Async object already ended.</value>
  </data>
  <data name="CalledTwice" xml:space="preserve">
    <value>The '{0}' member cannot be called more than one time.</value>
  </data>
  <data name="DataExpired" xml:space="preserve">
    <value>Cannot access a expired data.</value>
  </data>
  <data name="DefaultLoggingConfiguration" xml:space="preserve">
    <value>DefaultLoggingConfiguration</value>
  </data>
  <data name="DefaultLogSource" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="DefaultValueCanNotBeConverted" xml:space="preserve">
    <value>The default value of parameter '{0}' can not be converted to the parameter of type '{1}'. Please check if the value is appropriate to the parameter type or if the parameter type is a primitive type (Only primitive types are supported).</value>
  </data>
  <data name="DefaultValueCanNotBeConverted1" xml:space="preserve">
    <value>The default value of parameter '{0}' can not be converted to the parameter of type '{1}'. Please check if the value is appropriate to the parameter type or if the parameter type is a primitive type (Only primitive types are supported).</value>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>The directory '{0}' was not found.</value>
  </data>
  <data name="EmailFormatValidation" xml:space="preserve">
    <value>^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$</value>
  </data>
  <data name="EmptyConfigurationParameter" xml:space="preserve">
    <value>Parameter in configuration is empty.</value>
  </data>
  <data name="Entry" xml:space="preserve">
    <value>Method entry point has been reached.</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>An exception occurred.</value>
  </data>
  <data name="ExceptionLoggingMessage" xml:space="preserve">
    <value>Exception handling within exception policy: {0}</value>
  </data>
  <data name="ExceptionPolicyLoggingCategoryName" xml:space="preserve">
    <value>ExceptionPolicy</value>
  </data>
  <data name="ExtensionPointCardinalityMismatch_NoExports" xml:space="preserve">
    <value>No extension points found that match specified contract name and type</value>
  </data>
  <data name="FatalErrorPerformanceLogging" xml:space="preserve">
    <value>The error in performance logging component.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>The file '{0}' was not found.</value>
  </data>
  <data name="FtpCanNotReadStream" xml:space="preserve">
    <value>Can not read input stream.</value>
  </data>
  <data name="FtpFileSendingFailed" xml:space="preserve">
    <value>The sending of file failed.</value>
  </data>
  <data name="InvalidArgumentValue" xml:space="preserve">
    <value>This value is not supported as an argument for this API.</value>
  </data>
  <data name="InvalidOperationException" xml:space="preserve">
    <value>Exception policy is not able to compute proper return value.</value>
  </data>
  <data name="InvalidParameterSetForMapping" xml:space="preserve">
    <value>Invalid parameter set used for resource mapping in configuration file. Try {{key, type}} or {{key, baseName, resourceDir}} or {{key, baseName, assembly}}.</value>
  </data>
  <data name="InvalidPropertyName" xml:space="preserve">
    <value>The '{0}' property name is invalid.</value>
  </data>
  <data name="KeyNotFound" xml:space="preserve">
    <value>The key '{0}' was not found.</value>
  </data>
  <data name="MessageNotApplicable" xml:space="preserve">
    <value>The message is not applicable for that kind of notifier.</value>
  </data>
  <data name="NotAuthenticated" xml:space="preserve">
    <value>Not authenticated.</value>
  </data>
  <data name="NotAuthorized" xml:space="preserve">
    <value>Not authorized.</value>
  </data>
  <data name="NotOverridden" xml:space="preserve">
    <value>The '{0}' member must be overridden by a derived class.</value>
  </data>
  <data name="ObjectUninitialized" xml:space="preserve">
    <value>Cannot access a uninitialized object.</value>
  </data>
  <data name="PolicyDuplicationExceptionMessage" xml:space="preserve">
    <value>Policy '{0}' arleady exists in policy container.</value>
  </data>
  <data name="PolicyNotFoundExceptionMessage" xml:space="preserve">
    <value>Policy '{0}' not found in policy container.</value>
  </data>
  <data name="ResourceKeyAlreadyExists" xml:space="preserve">
    <value>The resource key {0} is already registered within provider.</value>
  </data>
  <data name="ResourceManagerDoesNotExist" xml:space="preserve">
    <value>The resource manager for the given key {0} does not exist.</value>
  </data>
  <data name="SectionNotFound" xml:space="preserve">
    <value>The configuration section '{0}' was not found.</value>
  </data>
  <data name="SecurityServiceConnectionProblem" xml:space="preserve">
    <value>Problem occured while connecting to security service.</value>
  </data>
  <data name="SmtpAddressWrongFormat" xml:space="preserve">
    <value>Wrong smtp address format: {0}</value>
  </data>
  <data name="SmtpAddressWrongFormat1" xml:space="preserve">
    <value>Wrong smtp address format: {0}</value>
  </data>
  <data name="SmtpMassegeSendingFailed" xml:space="preserve">
    <value>The sending of mails failed.</value>
  </data>
  <data name="StrategyTypeDoesNotImplementIPermissionStrategy" xml:space="preserve">
    <value>Passed strategy type does not implement IPermissionStrategy.</value>
  </data>
  <data name="TokenExpired" xml:space="preserve">
    <value>Token has expired.</value>
  </data>
  <data name="TokenNotValid" xml:space="preserve">
    <value>Token is not valid.</value>
  </data>
  <data name="WrongFtpNotifierConfigurationAddress" xml:space="preserve">
    <value>Wrong configuration of FtpNotifier: the address is not correct ftp address.</value>
  </data>
  <data name="WrongSmtpAddressedNotifierConfigurationRecipeintFormat" xml:space="preserve">
    <value>Wrong configuration of SmtpAddressedNotifier:  the recipient parameter is not correct e-mail address.</value>
  </data>
  <data name="WrongSmtpAddressedNotifierConfigurationRecipient" xml:space="preserve">
    <value>Wrong configuration of SmtpAddressedNotifier: the recipient parameters is required.</value>
  </data>
  <data name="WrongSmtpNotifierConfigurationPort" xml:space="preserve">
    <value>Wrong configuration of SmtpNotifier: the port parameter is incorrect.</value>
  </data>
  <data name="WrongSmtpNotifierConfigurationRequired" xml:space="preserve">
    <value>Wrong configuration of SmtpNotifier: the sender and host parameters are required.</value>
  </data>
  <data name="WrongSmtpNotifierConfigurationSenderFormat" xml:space="preserve">
    <value>Wrong configuration of SmtpNotifier: the sender parameter is not correct e-mail address. </value>
  </data>
  <data name="WrongSmtpSslFormat" xml:space="preserve">
    <value>Wrong configuration of SmtpNotfier: the ssl parameter has no correct value.</value>
  </data>
  <data name="LogSourceCategoryError" xml:space="preserve">
    <value>Atleast one category should be defined under a logging configuration.</value>
  </data>
  <data name="UndefinedCategoryError" xml:space="preserve">
    <value>Configuration is trying to enable undefined category id. Please check the category defenition.</value>
  </data>
  <data name="DuplicatedPublication" xml:space="preserve">
    <value>The publication was already registered</value>
  </data>
  <data name="EventArgsAreNotAssignable" xml:space="preserve">
    <value>Published EventArgs of type '{0}' are not assignable to subscriber handler method EventArgs paramter of type '{1}'</value>
  </data>
  <data name="EventNotFound" xml:space="preserve">
    <value>The event with name '{0}' is not a public member of defined publisher type '{1}'.</value>
  </data>
  <data name="InvalidEventHandlerParameters" xml:space="preserve">
    <value>Parameters of the handler method are not valid for event handler</value>
  </data>
  <data name="OnlyEventHandlerSignaturesAreSupported" xml:space="preserve">
    <value>Event with name '{0}' could not be registered as a publication. The event is not a valid event handler with signature: void(object, EventArgs).</value>
  </data>
  <data name="PassedMethodCantBeStatic" xml:space="preserve">
    <value>Event handler method passed as a parameter cannot be static.</value>
  </data>
  <data name="PassedMethodMustBeStatic" xml:space="preserve">
    <value>Event handler method passed as a parameter must be static.</value>
  </data>
  <data name="PublicEventNotFound" xml:space="preserve">
    <value>The event with name '{0}' is not a public member of publisher type '{1}'.</value>
  </data>
  <data name="StaticEventNotSupported" xml:space="preserve">
    <value>Event with name '{0}' could not be registered as a publication. Static events are not supported. </value>
  </data>
  <data name="SubscriptionDoesNotSupportMethodOverloads" xml:space="preserve">
    <value>Can not create a subscription for the '{0}' method defined in type '{1}' because it has an overload</value>
  </data>
  <data name="UserInterfaceNotSupported" xml:space="preserve">
    <value>Event broker initialized for non-WPF host application. User interface thread option unsupported in current configuration.</value>
  </data>
</root>